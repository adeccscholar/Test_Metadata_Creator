\file System\Corporate/Banking.h
\brief definition of dataclass myCorporate::TBanking of table \ref datamodel_table_Banking with informations about the account details provided by a person and used in a specific context in dictionary "simple person model"
\see table \ref datamodel_table_Banking
\version 1.0
\author Volker Hillmann (adecc Scholar)
\date 14.03.2024  file created with adecc Scholar metadata generator
<HR>
\copyright &copy; adecc Systemhaus GmbH 2024, All rights reserved.
<BR>This project is released under the MIT License.


\file System\Corporate/Banking.cpp
\brief implementation of dataclass myCorporate::TBanking of table \ref datamodel_table_Banking with informations about the account details provided by a person and used in a specific context in dictionary "simple person model"
\see table \ref datamodel_table_Banking
\version 1.0
\author Volker Hillmann (adecc Scholar)
\date 14.03.2024  file created with adecc Scholar metadata generator
<HR>
\copyright &copy; adecc Systemhaus GmbH 2024, All rights reserved.
<BR>This project is released under the MIT License.


\class myCorporate::TBanking
\brief informations about the account details provided by a person and used in a specific context
\author Volker Hillmann (adecc Scholar)
\date 14.03.2024 documentation for this project created
\see system class for the table \ref datamodel_table_Banking

\class myCorporate::TBanking::primary_key
\brief primary key for elements of the class myCorporate::TBanking in a container or when seeking an entity in the database.

\fn myCorporate::TBanking::primary_key::primary_key()
\brief standard constructor for the class myCorporate::TBanking::primary_key

\fn myCorporate::TBanking::primary_key::primary_key(primary_key const& other)
\brief copy constructor for the class myCorporate::TBanking::primary_key
\param [in] other primary_key const& with the instance which values should be copied

\fn myCorporate::TBanking::primary_key::primary_key(primary_key&&)
\brief move constructor for the class myCorporate::TBanking::primary_key
\param [in] other primary_key&& with the instance which values should be occupied and moved to this instance

\fn myCorporate::TBanking::primary_key::primary_key(TBanking const& other)
\brief initializing constructor with an instance of the encircling class myCorporate::TBanking for the class myCorporate::TBanking::primary_key
\note this constructor can't be constexpr because the direct manipulator of the encircling class may throw an exception
\throws std::runtime_error when a data element in the encircling class is empty
\param [in] other myCorporate::TBanking const& with the instance of the encircling class which values should be copied

\fn myCorporate::TBanking::primary_key::~primary_key()
\brief destructor for the primary_key class

\fn myCorporate::TBanking::primary_key::primary_key(int pID, int pBankingType)
\brief initializing constructor with the values for key attributes of the primary_key class
\param [in] pID int  with attribute as foreign key from an attribute ID of a person entity to which these account details belong
\param [in] pBankingType int  with extension of the account details key in order to be able to save several / different bank details in a standardized way

\var myCorporate::TBanking::primary_key::iID
\brief attribute as foreign key from an attribute ID of a person entity to which these account details belong
\details Source: key member myCorporate::TBanking::primary_key::iID in class myCorporate::TBanking::primary_key with the type int
\details Database: primary key attribute "ID" in entity \ref datamodel_table_Banking with database type INT
\fn myCorporate::TBanking::primary_key::ID() const
\brief selector for the data element myCorporate::TBanking::primary_key::iID
\returns int with the value for this member.
\fn myCorporate::TBanking::primary_key::ID(int newVal)
\brief manipulator for the data element myCorporate::TBanking::primary_key::iID
\param[in] newVal int with the value of the member.
\returns int with the new value for this member.
\var myCorporate::TBanking::primary_key::iBankingType
\brief extension of the account details key in order to be able to save several / different bank details in a standardized way
\details Source: key member myCorporate::TBanking::primary_key::iBankingType in class myCorporate::TBanking::primary_key with the type int
\details Database: primary key attribute "BankingType" in entity \ref datamodel_table_Banking with database type INT
\fn myCorporate::TBanking::primary_key::BankingType() const
\brief selector for the data element myCorporate::TBanking::primary_key::iBankingType
\returns int with the value for this member.
\fn myCorporate::TBanking::primary_key::BankingType(int newVal)
\brief manipulator for the data element myCorporate::TBanking::primary_key::iBankingType
\param[in] newVal int with the value of the member.
\returns int with the new value for this member.
\fn myCorporate::TBanking::primary_key::operator TBanking () const
\brief conversion operator for the encircling class
\returns value of an instance of the encircling class myCorporate::TBanking

\fn myCorporate::TBanking::primary_key::_compare(primary_key const&) const
\brief internal help function to compare the current instance with to another instance of the same class.
\details the comparison is performed using a lambda function, "comp_help", which compares two objects and returns -1 if the left - hand side (lhs) is less than the right - hand side(rhs), 1 if lhs is greater than rhs, and 0 if they are equal. the member while compared in the order they are in the dictionary one after the other, so long the values of the both instances are equal.
\param [in] other a constant reference to another object of the same class whose is being compared with the current object's values.
\return an integer value representing the result of the comparison:
<ul><li> returns  0 if the values of both objects are equal.</li>
<li>returns -1 if the values of the current object is less than values of the other object.</li>
<li>returns  1 if the values of the current object are greater than the values of the other object.</li>
</ul>
\fn myCorporate::TBanking::primary_key::operator == (primary_key const&) const
\brief checks whether the object is equal to another object of the same primary key class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the objects are equal, false otherwise.

\fn myCorporate::TBanking::primary_key::operator != (primary_key const&) const
\brief checks whether the object is not equal to another object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the objects are not equal, false otherwise.

\fn myCorporate::TBanking::primary_key::operator < (primary_key const&) const
\brief checks whether the object is less than the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is less than to the other object, false otherwise.

\fn myCorporate::TBanking::primary_key::operator <= (primary_key const&) const
\brief checks whether the object is less than or equal to the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is less than or equal to the other object, false otherwise.

\fn myCorporate::TBanking::primary_key::operator > (primary_key const&) const
\brief checks whether the object is greater than the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is greater than to the other object, false otherwise.

\fn myCorporate::TBanking::primary_key::operator >= (primary_key const&) const
\brief checks whether the object is greater than or equal the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is greater than or equal to the other object, false otherwise.

\typedef myCorporate::TBanking::container_ty
\brief container type as std::map with the generated primary key type myCorporate::TBanking::primary_key for instances of this class

\details The type uses the key type myCorporate::TBanking::primary_keypreviously created from the key attributes of table \ref datamodel_table_Banking as the key_type for the container to hold values of this class as value_type.
This means that the same rules apply in the database and the program, and the data can be assigned quickly.

\typedef myCorporate::TBanking::vector_ty
\brief container type as vector for elements of this class.
\details you can use a sort order to read data into this container or work with this later.

\fn myCorporate::TBanking::GetKey() const
\brief method to get the primary key for this instance
\returns type myCorporate::TBanking
\throw std::runtime::error if the attribute(s) of the primary key are empty.


\name constructors and destructor for this class
\{

\fn myCorporate::TBanking::TBanking()
\brief standard constructor for TBanking

\fn myCorporate::TBanking::TBanking(TBanking const& other)
\brief copy constructor for TBanking
\param[in] other reference of an instance of an other instance of myCorporate::TBanking to copy

\fn myCorporate::TBanking::TBanking(TBanking&&)
\brief rvalue constructor for TBanking

\fn myCorporate::TBanking::~TBanking()
\brief destructor for TBanking
\}

\name public functions for this class (following the framework for this project)
\{
\fn myCorporate::TBanking::swap(TBanking& other)\brief swap method for elements of this class, swap the paramter with the instance variables of this instance
\param[in] other reference of an other instance of the same type to swap the content

\fn myCorporate::TBanking::init();
\brief method to init this instance with empty / default values (reset it)

\fn myCorporate::TBanking::init(primary_key const& key_values)
\brief method to initialiaze an instance and copy the values of a primary key into it
\param[in] key_values a const reference to primary_key type to init this instance
\returns a reference to the instance

\fn myCorporate::TBanking::copy(TSimplePersonBase const& other);
method to copy instances of the hierachie of classes into another

\}

\name direct data elements from table
\{

\var myCorporate::TBanking::iID
\brief attribute as foreign key from an attribute ID of a person entity to which these account details belong
\details Source: member myCorporate::TBanking::iID in class myCorporate::TBanking with the type std::optional<int>
\details Database: attribute "ID" in entity \ref datamodel_table_Banking with database type INT

\var myCorporate::TBanking::iBankingType
\brief extension of the account details key in order to be able to save several / different bank details in a standardized way
\details Source: member myCorporate::TBanking::iBankingType in class myCorporate::TBanking with the type std::optional<int>
\details Database: attribute "BankingType" in entity \ref datamodel_table_Banking with database type INT

\var myCorporate::TBanking::strBankName
\brief name of the bank that manages this account (not necessarily required)
\details Source: member myCorporate::TBanking::strBankName in class myCorporate::TBanking with the type std::optional<std::string>
\details Database: attribute "BankName" in entity \ref datamodel_table_Banking with database type VARCHAR

\var myCorporate::TBanking::strIBAN
\brief IBAN number (account identification) for this bank account (required)
\details Source: member myCorporate::TBanking::strIBAN in class myCorporate::TBanking with the type std::optional<std::string>
\details Database: attribute "IBAN" in entity \ref datamodel_table_Banking with database type VARCHAR

\var myCorporate::TBanking::strBIC
\brief BIC number of the bank that manages this account (not necessarily required for transactions inside europe)
\details Source: member myCorporate::TBanking::strBIC in class myCorporate::TBanking with the type std::optional<std::string>
\details Database: attribute "BIC" in entity \ref datamodel_table_Banking with database type VARCHAR

\var myCorporate::TBanking::strBankOwner
\brief optionally the name of the owner of the bank details, if this differs from the assigned person
\details Source: member myCorporate::TBanking::strBankOwner in class myCorporate::TBanking with the type std::optional<std::string>
\details Database: attribute "BankOwner" in entity \ref datamodel_table_Banking with database type VARCHAR

\var myCorporate::TBanking::iCountry
\brief ID of the country for the banking entity, key attribute from the Countries entity
\details Source: member myCorporate::TBanking::iCountry in class myCorporate::TBanking with the type std::optional<int>
\details Database: attribute "Country" in entity \ref datamodel_table_Banking with database type INT


\}

\name public selectors with an optional retval for direct access to attributes
\{

\fn std::optional<int> const& myCorporate::TBanking::ID() const
\brief selector for the data element myCorporate::TBanking::iID
\details <b>attribute as foreign key from an attribute ID of a person entity to which these account details belong</b>
\returns std::optional<int> const&: Reference to the data element myCorporate::TBanking::iID
\fn std::optional<int> const& myCorporate::TBanking::BankingType() const
\brief selector for the data element myCorporate::TBanking::iBankingType
\details <b>extension of the account details key in order to be able to save several / different bank details in a standardized way</b>
\returns std::optional<int> const&: Reference to the data element myCorporate::TBanking::iBankingType
\fn std::optional<std::string> const& myCorporate::TBanking::BankName() const
\brief selector for the data element myCorporate::TBanking::strBankName
\details <b>name of the bank that manages this account (not necessarily required)</b>
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TBanking::strBankName
\fn std::optional<std::string> const& myCorporate::TBanking::IBAN() const
\brief selector for the data element myCorporate::TBanking::strIBAN
\details <b>IBAN number (account identification) for this bank account (required)</b>
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TBanking::strIBAN
\fn std::optional<std::string> const& myCorporate::TBanking::BIC() const
\brief selector for the data element myCorporate::TBanking::strBIC
\details <b>BIC number of the bank that manages this account (not necessarily required for transactions inside europe)</b>
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TBanking::strBIC
\fn std::optional<std::string> const& myCorporate::TBanking::BankOwner() const
\brief selector for the data element myCorporate::TBanking::strBankOwner
\details <b>optionally the name of the owner of the bank details, if this differs from the assigned person</b>
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TBanking::strBankOwner
\fn std::optional<int> const& myCorporate::TBanking::Country() const
\brief selector for the data element myCorporate::TBanking::iCountry
\details <b>ID of the country for the banking entity, key attribute from the Countries entity</b>
\returns std::optional<int> const&: Reference to the data element myCorporate::TBanking::iCountry

\}

\name public selectors with an direct access to attributes
\{

\fn int myCorporate::TBanking::_ID() const
\brief special selector for data element myCorporate::TBanking::iID
\details attribute as foreign key from an attribute ID of a person entity to which these account details belong
\details <b>attribute as foreign key from an attribute ID of a person entity to which these account details belong</b>
\throw std::runtime::error if the attribute myCorporate::TBanking::iID is empty
\returns int const&: Reference to the data element myCorporate::TBanking::iID
\fn int myCorporate::TBanking::_BankingType() const
\brief special selector for data element myCorporate::TBanking::iBankingType
\details extension of the account details key in order to be able to save several / different bank details in a standardized way
\details <b>extension of the account details key in order to be able to save several / different bank details in a standardized way</b>
\throw std::runtime::error if the attribute myCorporate::TBanking::iBankingType is empty
\returns int const&: Reference to the data element myCorporate::TBanking::iBankingType
\fn std::string const& myCorporate::TBanking::_BankName() const
\brief special selector for data element myCorporate::TBanking::strBankName
\details name of the bank that manages this account (not necessarily required)
\details <b>name of the bank that manages this account (not necessarily required)</b>
\throw std::runtime::error if the attribute myCorporate::TBanking::strBankName is empty
\returns std::string const& const&: Reference to the data element myCorporate::TBanking::strBankName
\fn std::string const& myCorporate::TBanking::_IBAN() const
\brief special selector for data element myCorporate::TBanking::strIBAN
\details IBAN number (account identification) for this bank account (required)
\details <b>IBAN number (account identification) for this bank account (required)</b>
\throw std::runtime::error if the attribute myCorporate::TBanking::strIBAN is empty
\returns std::string const& const&: Reference to the data element myCorporate::TBanking::strIBAN
\fn std::string const& myCorporate::TBanking::_BIC() const
\brief special selector for data element myCorporate::TBanking::strBIC
\details BIC number of the bank that manages this account (not necessarily required for transactions inside europe)
\details <b>BIC number of the bank that manages this account (not necessarily required for transactions inside europe)</b>
\throw std::runtime::error if the attribute myCorporate::TBanking::strBIC is empty
\returns std::string const& const&: Reference to the data element myCorporate::TBanking::strBIC
\fn std::string const& myCorporate::TBanking::_BankOwner() const
\brief special selector for data element myCorporate::TBanking::strBankOwner
\details optionally the name of the owner of the bank details, if this differs from the assigned person
\details <b>optionally the name of the owner of the bank details, if this differs from the assigned person</b>
\throw std::runtime::error if the attribute myCorporate::TBanking::strBankOwner is empty
\returns std::string const& const&: Reference to the data element myCorporate::TBanking::strBankOwner
\fn int myCorporate::TBanking::_Country() const
\brief special selector for data element myCorporate::TBanking::iCountry
\details ID of the country for the banking entity, key attribute from the Countries entity
\details <b>ID of the country for the banking entity, key attribute from the Countries entity</b>
\throw std::runtime::error if the attribute myCorporate::TBanking::iCountry is empty
\returns int const&: Reference to the data element myCorporate::TBanking::iCountry

\}

\name public manipulators for direct access to the attributes
\{

\fn std::optional<int> const& myCorporate::TBanking::ID(std::optional<int> const& newVal)
\brief manipulator for the data element myCorporate::TBanking::iID
\details <b>attribute as foreign key from an attribute ID of a person entity to which these account details belong</b>
\param[in] newVal the new Value for the member myCorporate::TBanking::iID
\returns std::optional<int> const&: Reference to the data element myCorporate::TBanking::iID

\fn std::optional<int> const& myCorporate::TBanking::BankingType(std::optional<int> const& newVal)
\brief manipulator for the data element myCorporate::TBanking::iBankingType
\details <b>extension of the account details key in order to be able to save several / different bank details in a standardized way</b>
\param[in] newVal the new Value for the member myCorporate::TBanking::iBankingType
\returns std::optional<int> const&: Reference to the data element myCorporate::TBanking::iBankingType

\fn std::optional<std::string> const& myCorporate::TBanking::BankName(std::optional<std::string> const& newVal)
\brief manipulator for the data element myCorporate::TBanking::strBankName
\details <b>name of the bank that manages this account (not necessarily required)</b>
\param[in] newVal the new Value for the member myCorporate::TBanking::strBankName
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TBanking::strBankName

\fn std::optional<std::string> const& myCorporate::TBanking::IBAN(std::optional<std::string> const& newVal)
\brief manipulator for the data element myCorporate::TBanking::strIBAN
\details <b>IBAN number (account identification) for this bank account (required)</b>
\param[in] newVal the new Value for the member myCorporate::TBanking::strIBAN
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TBanking::strIBAN

\fn std::optional<std::string> const& myCorporate::TBanking::BIC(std::optional<std::string> const& newVal)
\brief manipulator for the data element myCorporate::TBanking::strBIC
\details <b>BIC number of the bank that manages this account (not necessarily required for transactions inside europe)</b>
\param[in] newVal the new Value for the member myCorporate::TBanking::strBIC
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TBanking::strBIC

\fn std::optional<std::string> const& myCorporate::TBanking::BankOwner(std::optional<std::string> const& newVal)
\brief manipulator for the data element myCorporate::TBanking::strBankOwner
\details <b>optionally the name of the owner of the bank details, if this differs from the assigned person</b>
\param[in] newVal the new Value for the member myCorporate::TBanking::strBankOwner
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TBanking::strBankOwner

\fn std::optional<int> const& myCorporate::TBanking::Country(std::optional<int> const& newVal)
\brief manipulator for the data element myCorporate::TBanking::iCountry
\details <b>ID of the country for the banking entity, key attribute from the Countries entity</b>
\param[in] newVal the new Value for the member myCorporate::TBanking::iCountry
\returns std::optional<int> const&: Reference to the data element myCorporate::TBanking::iCountry


\}


