\file System\Corporate/InternetTypes.h
\brief definition of dataclass myCorporate::TInternetTypes of table \ref datamodel_table_InternetTypes with domain / range of values for internet connection types, this is an extension of the relationship between persons and internet connections. in dictionary "simple person model"
\see table \ref datamodel_table_InternetTypes
\version 1.0
\author Volker Hillmann (adecc Scholar)
\date 17.03.2024  file created with adecc Scholar metadata generator
<HR>
\copyright &copy; adecc Systemhaus GmbH 2024, All rights reserved.
<BR>This project is released under the MIT License.


\file System\Corporate/InternetTypes.cpp
\brief implementation of dataclass myCorporate::TInternetTypes of table \ref datamodel_table_InternetTypes with domain / range of values for internet connection types, this is an extension of the relationship between persons and internet connections. in dictionary "simple person model"
\see table \ref datamodel_table_InternetTypes
\version 1.0
\author Volker Hillmann (adecc Scholar)
\date 17.03.2024  file created with adecc Scholar metadata generator
<HR>
\copyright &copy; adecc Systemhaus GmbH 2024, All rights reserved.
<BR>This project is released under the MIT License.


\class myCorporate::TInternetTypes
\brief domain / range of values for internet connection types, this is an extension of the relationship between persons and internet connections.
\author Volker Hillmann (adecc Scholar)
\date 17.03.2024 documentation for this project created
\see system class for the table \ref datamodel_table_InternetTypes

\class myCorporate::TInternetTypes::primary_key
\brief primary key for elements of the class myCorporate::TInternetTypes in a container or when seeking an entity in the database.

\fn myCorporate::TInternetTypes::primary_key::primary_key()
\brief standard constructor for the class myCorporate::TInternetTypes::primary_key

\fn myCorporate::TInternetTypes::primary_key::primary_key(primary_key const& other)
\brief copy constructor for the class myCorporate::TInternetTypes::primary_key
\param [in] other primary_key const& with the instance which values should be copied

\fn myCorporate::TInternetTypes::primary_key::primary_key(primary_key&&)
\brief move constructor for the class myCorporate::TInternetTypes::primary_key
\param [in] other primary_key&& with the instance which values should be occupied and moved to this instance

\fn myCorporate::TInternetTypes::primary_key::primary_key(TInternetTypes const& other)
\brief initializing constructor with an instance of the encircling class myCorporate::TInternetTypes for the class myCorporate::TInternetTypes::primary_key
\note this constructor can't be constexpr because the direct manipulator of the encircling class may throw an exception
\throws std::runtime_error when a data element in the encircling class is empty
\param [in] other myCorporate::TInternetTypes const& with the instance of the encircling class which values should be copied

\fn myCorporate::TInternetTypes::primary_key::~primary_key()
\brief destructor for the primary_key class

\fn myCorporate::TInternetTypes::primary_key::primary_key(int pID)
\brief initializing constructor with the values for key attributes of the primary_key class
\param [in] pID int  with unique identification number for a record in this domain with internet connection types

\var myCorporate::TInternetTypes::primary_key::iID
\brief unique identification number for a record in this domain with internet connection types
\details Source: key member myCorporate::TInternetTypes::primary_key::iID in class myCorporate::TInternetTypes::primary_key with the type int
\details Database: primary key attribute "ID" in entity \ref datamodel_table_InternetTypes with database type INT
\fn myCorporate::TInternetTypes::primary_key::ID() const
\brief selector for the data element myCorporate::TInternetTypes::primary_key::iID
\returns int with the value for this member.
\fn myCorporate::TInternetTypes::primary_key::ID(int newVal)
\brief manipulator for the data element myCorporate::TInternetTypes::primary_key::iID
\param[in] newVal int with the value of the member.
\returns int with the new value for this member.
\fn myCorporate::TInternetTypes::primary_key::operator TInternetTypes () const
\brief conversion operator for the encircling class
\returns value of an instance of the encircling class myCorporate::TInternetTypes

\fn myCorporate::TInternetTypes::primary_key::_compare(primary_key const&) const
\brief internal help function to compare the current instance with to another instance of the same class.
\details the comparison is performed using a lambda function, "comp_help", which compares two objects and returns -1 if the left - hand side (lhs) is less than the right - hand side(rhs), 1 if lhs is greater than rhs, and 0 if they are equal. the member while compared in the order they are in the dictionary one after the other, so long the values of the both instances are equal.
\param [in] other a constant reference to another object of the same class whose is being compared with the current object's values.
\return an integer value representing the result of the comparison:
<ul><li> returns  0 if the values of both objects are equal.</li>
<li>returns -1 if the values of the current object is less than values of the other object.</li>
<li>returns  1 if the values of the current object are greater than the values of the other object.</li>
</ul>
\fn myCorporate::TInternetTypes::primary_key::operator == (primary_key const&) const
\brief checks whether the object is equal to another object of the same primary key class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the objects are equal, false otherwise.

\fn myCorporate::TInternetTypes::primary_key::operator != (primary_key const&) const
\brief checks whether the object is not equal to another object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the objects are not equal, false otherwise.

\fn myCorporate::TInternetTypes::primary_key::operator < (primary_key const&) const
\brief checks whether the object is less than the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is less than to the other object, false otherwise.

\fn myCorporate::TInternetTypes::primary_key::operator <= (primary_key const&) const
\brief checks whether the object is less than or equal to the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is less than or equal to the other object, false otherwise.

\fn myCorporate::TInternetTypes::primary_key::operator > (primary_key const&) const
\brief checks whether the object is greater than the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is greater than to the other object, false otherwise.

\fn myCorporate::TInternetTypes::primary_key::operator >= (primary_key const&) const
\brief checks whether the object is greater than or equal the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is greater than or equal to the other object, false otherwise.

\typedef myCorporate::TInternetTypes::container_ty
\brief container type as std::map with the generated primary key type myCorporate::TInternetTypes::primary_key for instances of this class

\details The type uses the key type myCorporate::TInternetTypes::primary_keypreviously created from the key attributes of table \ref datamodel_table_InternetTypes as the key_type for the container to hold values of this class as value_type.
This means that the same rules apply in the database and the program, and the data can be assigned quickly.

\typedef myCorporate::TInternetTypes::vector_ty
\brief container type as vector for elements of this class.
\details you can use a sort order to read data into this container or work with this later.

\fn myCorporate::TInternetTypes::GetKey() const
\brief method to get the primary key for this instance
\returns type myCorporate::TInternetTypes
\throw std::runtime::error if the attribute(s) of the primary key are empty.


\name constructors and destructor for this class
\{

\fn myCorporate::TInternetTypes::TInternetTypes()
\brief standard constructor for TInternetTypes

\fn myCorporate::TInternetTypes::TInternetTypes(TInternetTypes const& other)
\brief copy constructor for TInternetTypes
\param[in] other reference of an instance of an other instance of myCorporate::TInternetTypes to copy

\fn myCorporate::TInternetTypes::TInternetTypes(TInternetTypes&&)
\brief rvalue constructor for TInternetTypes

\fn myCorporate::TInternetTypes::~TInternetTypes()
\brief destructor for TInternetTypes
\}

\name public functions for this class (following the framework for this project)
\{
\fn myCorporate::TInternetTypes::swap(TInternetTypes& other)\brief swap method for elements of this class, swap the paramter with the instance variables of this instance
\param[in] other reference of an other instance of the same type to swap the content

\fn myCorporate::TInternetTypes::init();
\brief method to init this instance with empty / default values (reset it)

\fn myCorporate::TInternetTypes::init(primary_key const& key_values)
\brief method to initialiaze an instance and copy the values of a primary key into it
\param[in] key_values a const reference to primary_key type to init this instance
\returns a reference to the instance

\fn myCorporate::TInternetTypes::copy(TSimplePersonBase const& other);
method to copy instances of the hierachie of classes into another

\}

\name direct data elements from table
\{

\var myCorporate::TInternetTypes::iID
\brief unique identification number for a record in this domain with internet connection types
\details Source: member myCorporate::TInternetTypes::iID in class myCorporate::TInternetTypes with the type std::optional<int>
\details Database: attribute "ID" in entity \ref datamodel_table_InternetTypes with database type INT

\var myCorporate::TInternetTypes::strDenotation
\brief unique description of an internet connection type entity in the domain, used in selections, comboboxes, … (key canditate)
\details Source: member myCorporate::TInternetTypes::strDenotation in class myCorporate::TInternetTypes with the type std::optional<std::string>
\details Database: attribute "Denotation" in entity \ref datamodel_table_InternetTypes with database type VARCHAR

\var myCorporate::TInternetTypes::strAbbreviation
\brief non-representative abbreviation that can be used for a short advertisement for this internet connection type
\details Source: member myCorporate::TInternetTypes::strAbbreviation in class myCorporate::TInternetTypes with the type std::optional<std::string>
\details Database: attribute "Abbreviation" in entity \ref datamodel_table_InternetTypes with database type VARCHAR

\var myCorporate::TInternetTypes::strDescription
\brief detailed description of these internet connection type,this is a self documentation, possible use as hint or to information in the programm
\details Source: member myCorporate::TInternetTypes::strDescription in class myCorporate::TInternetTypes with the type std::optional<std::string>
\details Database: attribute "Description" in entity \ref datamodel_table_InternetTypes with database type VARCHAR(MAX)

\var myCorporate::TInternetTypes::strPrefix
\brief protocoll prefix which is used for this internet type (smtp:, phone:, https_, ...)
\details Source: member myCorporate::TInternetTypes::strPrefix in class myCorporate::TInternetTypes with the type std::optional<std::string>
\details Database: attribute "Prefix" in entity \ref datamodel_table_InternetTypes with database type VARCHAR

\var myCorporate::TInternetTypes::strNotes
\brief notes, with additional / free information for this type of internet connection, not used in application
\details Source: member myCorporate::TInternetTypes::strNotes in class myCorporate::TInternetTypes with the type std::optional<std::string>
\details Database: attribute "Notes" in entity \ref datamodel_table_InternetTypes with database type VARCHAR(MAX)

\var myCorporate::TInternetTypes::boUrgentValue
\brief boolean value that makes this entity of internet connection type to a system value (cannot be changed as it is used directly by the program)
\details Source: member myCorporate::TInternetTypes::boUrgentValue in class myCorporate::TInternetTypes with the type std::optional<bool>
\details Database: attribute "UrgentValue" in entity \ref datamodel_table_InternetTypes with database type TINYINT


\}

\name public selectors with an optional retval for direct access to attributes
\{

\fn std::optional<int> const& myCorporate::TInternetTypes::ID() const
\brief selector for the data element myCorporate::TInternetTypes::iID
\details <b>unique identification number for a record in this domain with internet connection types</b>
\returns std::optional<int> const&: Reference to the data element myCorporate::TInternetTypes::iID
\fn std::optional<std::string> const& myCorporate::TInternetTypes::Denotation() const
\brief selector for the data element myCorporate::TInternetTypes::strDenotation
\details <b>unique description of an internet connection type entity in the domain, used in selections, comboboxes, … (key canditate)</b>
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TInternetTypes::strDenotation
\fn std::optional<std::string> const& myCorporate::TInternetTypes::Abbreviation() const
\brief selector for the data element myCorporate::TInternetTypes::strAbbreviation
\details <b>non-representative abbreviation that can be used for a short advertisement for this internet connection type</b>
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TInternetTypes::strAbbreviation
\fn std::optional<std::string> const& myCorporate::TInternetTypes::Description() const
\brief selector for the data element myCorporate::TInternetTypes::strDescription
\details <b>detailed description of these internet connection type,this is a self documentation, possible use as hint or to information in the programm</b>
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TInternetTypes::strDescription
\fn std::optional<std::string> const& myCorporate::TInternetTypes::Prefix() const
\brief selector for the data element myCorporate::TInternetTypes::strPrefix
\details <b>protocoll prefix which is used for this internet type (smtp:, phone:, https_, ...)</b>
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TInternetTypes::strPrefix
\fn std::optional<std::string> const& myCorporate::TInternetTypes::Notes() const
\brief selector for the data element myCorporate::TInternetTypes::strNotes
\details <b>notes, with additional / free information for this type of internet connection, not used in application</b>
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TInternetTypes::strNotes
\fn std::optional<bool> const& myCorporate::TInternetTypes::UrgentValue() const
\brief selector for the data element myCorporate::TInternetTypes::boUrgentValue
\details <b>boolean value that makes this entity of internet connection type to a system value (cannot be changed as it is used directly by the program)</b>
\returns std::optional<bool> const&: Reference to the data element myCorporate::TInternetTypes::boUrgentValue

\}

\name public selectors with an direct access to attributes
\{

\fn int myCorporate::TInternetTypes::_ID() const
\brief special selector for data element myCorporate::TInternetTypes::iID
\details unique identification number for a record in this domain with internet connection types
\details <b>unique identification number for a record in this domain with internet connection types</b>
\throw std::runtime::error if the attribute myCorporate::TInternetTypes::iID is empty
\returns int const&: Reference to the data element myCorporate::TInternetTypes::iID
\fn std::string const& myCorporate::TInternetTypes::_Denotation() const
\brief special selector for data element myCorporate::TInternetTypes::strDenotation
\details unique description of an internet connection type entity in the domain, used in selections, comboboxes, … (key canditate)
\details <b>unique description of an internet connection type entity in the domain, used in selections, comboboxes, … (key canditate)</b>
\throw std::runtime::error if the attribute myCorporate::TInternetTypes::strDenotation is empty
\returns std::string const& const&: Reference to the data element myCorporate::TInternetTypes::strDenotation
\fn std::string const& myCorporate::TInternetTypes::_Abbreviation() const
\brief special selector for data element myCorporate::TInternetTypes::strAbbreviation
\details non-representative abbreviation that can be used for a short advertisement for this internet connection type
\details <b>non-representative abbreviation that can be used for a short advertisement for this internet connection type</b>
\throw std::runtime::error if the attribute myCorporate::TInternetTypes::strAbbreviation is empty
\returns std::string const& const&: Reference to the data element myCorporate::TInternetTypes::strAbbreviation
\fn std::string const& myCorporate::TInternetTypes::_Description() const
\brief special selector for data element myCorporate::TInternetTypes::strDescription
\details detailed description of these internet connection type,this is a self documentation, possible use as hint or to information in the programm
\details <b>detailed description of these internet connection type,this is a self documentation, possible use as hint or to information in the programm</b>
\throw std::runtime::error if the attribute myCorporate::TInternetTypes::strDescription is empty
\returns std::string const& const&: Reference to the data element myCorporate::TInternetTypes::strDescription
\fn std::string const& myCorporate::TInternetTypes::_Prefix() const
\brief special selector for data element myCorporate::TInternetTypes::strPrefix
\details protocoll prefix which is used for this internet type (smtp:, phone:, https_, ...)
\details <b>protocoll prefix which is used for this internet type (smtp:, phone:, https_, ...)</b>
\throw std::runtime::error if the attribute myCorporate::TInternetTypes::strPrefix is empty
\returns std::string const& const&: Reference to the data element myCorporate::TInternetTypes::strPrefix
\fn std::string const& myCorporate::TInternetTypes::_Notes() const
\brief special selector for data element myCorporate::TInternetTypes::strNotes
\details notes, with additional / free information for this type of internet connection, not used in application
\details <b>notes, with additional / free information for this type of internet connection, not used in application</b>
\throw std::runtime::error if the attribute myCorporate::TInternetTypes::strNotes is empty
\returns std::string const& const&: Reference to the data element myCorporate::TInternetTypes::strNotes
\fn bool myCorporate::TInternetTypes::_UrgentValue() const
\brief special selector for data element myCorporate::TInternetTypes::boUrgentValue
\details boolean value that makes this entity of internet connection type to a system value (cannot be changed as it is used directly by the program)
\details <b>boolean value that makes this entity of internet connection type to a system value (cannot be changed as it is used directly by the program)</b>
\throw std::runtime::error if the attribute myCorporate::TInternetTypes::boUrgentValue is empty
\returns bool const&: Reference to the data element myCorporate::TInternetTypes::boUrgentValue

\}

\name public manipulators for direct access to the attributes
\{

\fn std::optional<int> const& myCorporate::TInternetTypes::ID(std::optional<int> const& newVal)
\brief manipulator for the data element myCorporate::TInternetTypes::iID
\details <b>unique identification number for a record in this domain with internet connection types</b>
\param[in] newVal the new Value for the member myCorporate::TInternetTypes::iID
\returns std::optional<int> const&: Reference to the data element myCorporate::TInternetTypes::iID

\fn std::optional<std::string> const& myCorporate::TInternetTypes::Denotation(std::optional<std::string> const& newVal)
\brief manipulator for the data element myCorporate::TInternetTypes::strDenotation
\details <b>unique description of an internet connection type entity in the domain, used in selections, comboboxes, … (key canditate)</b>
\param[in] newVal the new Value for the member myCorporate::TInternetTypes::strDenotation
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TInternetTypes::strDenotation

\fn std::optional<std::string> const& myCorporate::TInternetTypes::Abbreviation(std::optional<std::string> const& newVal)
\brief manipulator for the data element myCorporate::TInternetTypes::strAbbreviation
\details <b>non-representative abbreviation that can be used for a short advertisement for this internet connection type</b>
\param[in] newVal the new Value for the member myCorporate::TInternetTypes::strAbbreviation
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TInternetTypes::strAbbreviation

\fn std::optional<std::string> const& myCorporate::TInternetTypes::Description(std::optional<std::string> const& newVal)
\brief manipulator for the data element myCorporate::TInternetTypes::strDescription
\details <b>detailed description of these internet connection type,this is a self documentation, possible use as hint or to information in the programm</b>
\param[in] newVal the new Value for the member myCorporate::TInternetTypes::strDescription
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TInternetTypes::strDescription

\fn std::optional<std::string> const& myCorporate::TInternetTypes::Prefix(std::optional<std::string> const& newVal)
\brief manipulator for the data element myCorporate::TInternetTypes::strPrefix
\details <b>protocoll prefix which is used for this internet type (smtp:, phone:, https_, ...)</b>
\param[in] newVal the new Value for the member myCorporate::TInternetTypes::strPrefix
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TInternetTypes::strPrefix

\fn std::optional<std::string> const& myCorporate::TInternetTypes::Notes(std::optional<std::string> const& newVal)
\brief manipulator for the data element myCorporate::TInternetTypes::strNotes
\details <b>notes, with additional / free information for this type of internet connection, not used in application</b>
\param[in] newVal the new Value for the member myCorporate::TInternetTypes::strNotes
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TInternetTypes::strNotes

\fn std::optional<bool> const& myCorporate::TInternetTypes::UrgentValue(std::optional<bool> const& newVal)
\brief manipulator for the data element myCorporate::TInternetTypes::boUrgentValue
\details <b>boolean value that makes this entity of internet connection type to a system value (cannot be changed as it is used directly by the program)</b>
\param[in] newVal the new Value for the member myCorporate::TInternetTypes::boUrgentValue
\returns std::optional<bool> const&: Reference to the data element myCorporate::TInternetTypes::boUrgentValue


\}


