\file System\Corporate/Person.h
\brief definition of dataclass myCorporate::TPerson of table \ref datamodel_table_Person with informations about a person, base for different kinds of special persons in other areas of the company in dictionary "simple person model"
\details The table "Person" serves as an abstraction of the "Employees" table, aiming to separate general attributes from specific employee-related ones. This abstraction facilitates the derivation of other types of individuals in the future.
\details The "Employees" table inherits (is-a relationship) from the "Person" table, utilizing the primary key of "Person" as a foreign key.This establishes a referential relationship, ensuring data integrity and consistency between the two tables.
\details By employing this design, future extensions or modifications to accommodate different types of individuals beyond employees become feasible without compromising the integrity of the database structure.
\see table \ref datamodel_table_Person
\version 1.0
\author Volker Hillmann (adecc Scholar)
\date 22.04.2025  file created with adecc Scholar metadata generator
<HR>
\copyright &copy; adecc Systemhaus GmbH 2024, All rights reserved.
<BR>This project is released under the MIT License.


\file System\Corporate/Person.cpp
\brief implementation of dataclass myCorporate::TPerson of table \ref datamodel_table_Person with informations about a person, base for different kinds of special persons in other areas of the company in dictionary "simple person model"
\details The table "Person" serves as an abstraction of the "Employees" table, aiming to separate general attributes from specific employee-related ones. This abstraction facilitates the derivation of other types of individuals in the future.
\details The "Employees" table inherits (is-a relationship) from the "Person" table, utilizing the primary key of "Person" as a foreign key.This establishes a referential relationship, ensuring data integrity and consistency between the two tables.
\details By employing this design, future extensions or modifications to accommodate different types of individuals beyond employees become feasible without compromising the integrity of the database structure.
\see table \ref datamodel_table_Person
\version 1.0
\author Volker Hillmann (adecc Scholar)
\date 22.04.2025  file created with adecc Scholar metadata generator
<HR>
\copyright &copy; adecc Systemhaus GmbH 2024, All rights reserved.
<BR>This project is released under the MIT License.


\class myCorporate::TPerson
\brief informations about a person, base for different kinds of special persons in other areas of the company
\details The table "Person" serves as an abstraction of the "Employees" table, aiming to separate general attributes from specific employee-related ones. This abstraction facilitates the derivation of other types of individuals in the future.
\details The "Employees" table inherits (is-a relationship) from the "Person" table, utilizing the primary key of "Person" as a foreign key.This establishes a referential relationship, ensuring data integrity and consistency between the two tables.
\details By employing this design, future extensions or modifications to accommodate different types of individuals beyond employees become feasible without compromising the integrity of the database structure.
\details this class have composed data of following class(es). The following table show a composed and types which created to use this classes:
<table><thead>
<tr><th rowspan="2">name of key</th>
    <th rowspan="2">class</th>
    <th rowspan="2">table</th>
    <th colspan="2">key attributes</th>
    <th rowspan="2">additional keys</th>
    <th rowspan="2">file</th></tr>
<tr><th> this</th>
<th> foreign</th>
</tr></thead><tbody><tr><td rowspan="1">myCorporate::TPerson::address_ty</td>
    <td rowspan="1">myCorporate::TAddress</td>
    <td rowspan="1">\ref datamodel_table_Address</td>
    <td>ID(int)</td>
    <td>ID(int)</td>
    <td rowspan="1">AddressType(int)</td>
    <td rowspan="1">\ref System\Corporate/Address.h </td>
</tr>
<tr><td rowspan="1">myCorporate::TPerson::banking_ty</td>
    <td rowspan="1">myCorporate::TBanking</td>
    <td rowspan="1">\ref datamodel_table_Banking</td>
    <td>ID(int)</td>
    <td>ID(int)</td>
    <td rowspan="1">BankingType(int)</td>
    <td rowspan="1">\ref System\Corporate/Banking.h </td>
</tr>
<tr><td rowspan="1">myCorporate::TPerson::internet_ty</td>
    <td rowspan="1">myCorporate::TInternet</td>
    <td rowspan="1">\ref datamodel_table_Internet</td>
    <td>ID(int)</td>
    <td>ID(int)</td>
    <td rowspan="1">InternetType(int)</td>
    <td rowspan="1">\ref System\Corporate/Internet.h </td>
</tr>
<tr><td rowspan="1">myCorporate::TPerson::phone_ty</td>
    <td rowspan="1">myCorporate::TPhone</td>
    <td rowspan="1">\ref datamodel_table_Phone</td>
    <td>ID(int)</td>
    <td>ID(int)</td>
    <td rowspan="1">PhoneType(int)</td>
    <td rowspan="1">\ref System\Corporate/Phone.h </td>
</tr>
</tbody></table>

\author Volker Hillmann (adecc Scholar)
\date 22.04.2025 documentation for this project created
\see system class for the table \ref datamodel_table_Person

\class myCorporate::TPerson::primary_key
\brief primary key for elements of the class myCorporate::TPerson in a container or when seeking an entity in the database.

\fn myCorporate::TPerson::primary_key::primary_key()
\brief standard constructor for the class myCorporate::TPerson::primary_key

\fn myCorporate::TPerson::primary_key::primary_key(primary_key const& other)
\brief copy constructor for the class myCorporate::TPerson::primary_key
\param [in] other primary_key const& with the instance which values should be copied

\fn myCorporate::TPerson::primary_key::primary_key(primary_key&&)
\brief move constructor for the class myCorporate::TPerson::primary_key
\param [in] other primary_key&& with the instance which values should be occupied and moved to this instance

\fn myCorporate::TPerson::primary_key::primary_key(TPerson const& other)
\brief initializing constructor with an instance of the encircling class myCorporate::TPerson for the class myCorporate::TPerson::primary_key
\note this constructor can't be constexpr because the direct manipulator of the encircling class may throw an exception
\throws std::runtime_error when a data element in the encircling class is empty
\param [in] other myCorporate::TPerson const& with the instance of the encircling class which values should be copied

\fn myCorporate::TPerson::primary_key::primary_key(mySales::TContacts const& other)
\brief initializing constructor with an instance of the inherited class mySales::TContacts for the class myCorporate::TPerson::primary_key
\note this constructor can't be constexpr because the direct manipulator of the inherited class may throw an exception
\throws std::runtime_error when a data element in the inherited class mySales::TContacts is empty
\param [in] other mySales::TContacts const& with the instance of the inherited class which values should be copied

\fn myCorporate::TPerson::primary_key::primary_key(mySales::TCustomers const& other)
\brief initializing constructor with an instance of the inherited class mySales::TCustomers for the class myCorporate::TPerson::primary_key
\note this constructor can't be constexpr because the direct manipulator of the inherited class may throw an exception
\throws std::runtime_error when a data element in the inherited class mySales::TCustomers is empty
\param [in] other mySales::TCustomers const& with the instance of the inherited class which values should be copied

\fn myCorporate::TPerson::primary_key::primary_key(myHR::TEmployees const& other)
\brief initializing constructor with an instance of the inherited class myHR::TEmployees for the class myCorporate::TPerson::primary_key
\note this constructor can't be constexpr because the direct manipulator of the inherited class may throw an exception
\throws std::runtime_error when a data element in the inherited class myHR::TEmployees is empty
\param [in] other myHR::TEmployees const& with the instance of the inherited class which values should be copied

\fn myCorporate::TPerson::primary_key::~primary_key()
\brief destructor for the primary_key class

\fn myCorporate::TPerson::primary_key::primary_key(int pID)
\brief initializing constructor with the values for key attributes of the primary_key class
\param [in] pID int  with 

\var myCorporate::TPerson::primary_key::iID
\brief Source: key member myCorporate::TPerson::primary_key::iID in class myCorporate::TPerson::primary_key with the type int
\details Database: primary key attribute "ID" in entity \ref datamodel_table_Person with database type INT
\fn myCorporate::TPerson::primary_key::ID() const
\brief selector for the data element myCorporate::TPerson::primary_key::iID
\returns int with the value for this member.
\fn myCorporate::TPerson::primary_key::ID(int newVal)
\brief manipulator for the data element myCorporate::TPerson::primary_key::iID
\param[in] newVal int with the value of the member.
\returns int with the new value for this member.
\fn myCorporate::TPerson::primary_key::operator TPerson () const
\brief conversion operator for the encircling class
\returns value of an instance of the encircling class myCorporate::TPerson

\fn myCorporate::TPerson::primary_key::write(std::ostream& out) const
\brief method to write all elements of the instance to an std::ostream
\param[in] out reference to a std::ostream as target to write data for this instance of the class myCorporate::TPerson::primary_key
\returns reference to the std::ostream to continue writing after call of this function

\fn myCorporate::TPerson::primary_key::_compare(primary_key const&) const
\brief internal help function to compare the current instance with to another instance of the same class.
\details the comparison is performed using a lambda function, "comp_help", which compares two objects and returns -1 if the left - hand side (lhs) is less than the right - hand side(rhs), 1 if lhs is greater than rhs, and 0 if they are equal. the member while compared in the order they are in the dictionary one after the other, so long the values of the both instances are equal.
\param [in] other a constant reference to another object of the same class whose is being compared with the current object's values.
\return an integer value representing the result of the comparison:
<ul><li> returns  0 if the values of both objects are equal.</li>
<li>returns -1 if the values of the current object is less than values of the other object.</li>
<li>returns  1 if the values of the current object are greater than the values of the other object.</li>
</ul>
\fn myCorporate::TPerson::primary_key::operator == (primary_key const&) const
\brief checks whether the object is equal to another object of the same primary key class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the objects are equal, false otherwise.

\fn myCorporate::TPerson::primary_key::operator != (primary_key const&) const
\brief checks whether the object is not equal to another object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the objects are not equal, false otherwise.

\fn myCorporate::TPerson::primary_key::operator < (primary_key const&) const
\brief checks whether the object is less than the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is less than to the other object, false otherwise.

\fn myCorporate::TPerson::primary_key::operator <= (primary_key const&) const
\brief checks whether the object is less than or equal to the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is less than or equal to the other object, false otherwise.

\fn myCorporate::TPerson::primary_key::operator > (primary_key const&) const
\brief checks whether the object is greater than the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is greater than to the other object, false otherwise.

\fn myCorporate::TPerson::primary_key::operator >= (primary_key const&) const
\brief checks whether the object is greater than or equal the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is greater than or equal to the other object, false otherwise.

\typedef myCorporate::TPerson::container_ty
\brief container type as std::map with the generated primary key type myCorporate::TPerson::primary_key for instances of this class

\details The type uses the key type myCorporate::TPerson::primary_keypreviously created from the key attributes of table \ref datamodel_table_Person as the key_type for the container to hold values of this class as value_type.
This means that the same rules apply in the database and the program, and the data can be assigned quickly.

\typedef myCorporate::TPerson::vector_ty
\brief container type as vector for elements of this class.
\details you can use a sort order to read data into this container or work with this later.

\fn myCorporate::TPerson::GetKey() const
\brief method to get the primary key for this instance
\returns type myCorporate::TPerson
\throws std::runtime::error if the attribute(s) of the primary key are empty.

\typedef myCorporate::TPerson::address_ty
\brief composed data element for the table \ref datamodel_table_Address
\details This type uses the data elements of the primary key of the table that are not used in the link to this type.
\details <table><tr><th>attribute</th><th>data element</th><th>description</th></tr>
<tr><td>AddressType</td>
    <td>myCorporate::TAddress::iAddressType</td>
    <td></td>
</tr>
</table>
\typedef myCorporate::TPerson::banking_ty
\brief composed data element for the table \ref datamodel_table_Banking
\details This type uses the data elements of the primary key of the table that are not used in the link to this type.
\details <table><tr><th>attribute</th><th>data element</th><th>description</th></tr>
<tr><td>BankingType</td>
    <td>myCorporate::TBanking::iBankingType</td>
    <td></td>
</tr>
</table>
\typedef myCorporate::TPerson::internet_ty
\brief composed data element for the table \ref datamodel_table_Internet
\details This type uses the data elements of the primary key of the table that are not used in the link to this type.
\details <table><tr><th>attribute</th><th>data element</th><th>description</th></tr>
<tr><td>InternetType</td>
    <td>myCorporate::TInternet::iInternetType</td>
    <td></td>
</tr>
</table>
\typedef myCorporate::TPerson::phone_ty
\brief composed data element for the table \ref datamodel_table_Phone
\details This type uses the data elements of the primary key of the table that are not used in the link to this type.
\details <table><tr><th>attribute</th><th>data element</th><th>description</th></tr>
<tr><td>PhoneType</td>
    <td>myCorporate::TPhone::iPhoneType</td>
    <td></td>
</tr>
</table>

\name constructors and destructor for this class
\{

\fn myCorporate::TPerson::TPerson()
\brief standard constructor for TPerson

\fn myCorporate::TPerson::TPerson(TPerson const& other)
\brief copy constructor for TPerson
\param[in] other reference of an instance of an other instance of myCorporate::TPerson to copy

\fn myCorporate::TPerson::TPerson(TPerson&&)
\brief rvalue constructor for TPerson

\fn myCorporate::TPerson::~TPerson()
\brief destructor for TPerson
\}

\name public functions for this class (following the framework for this project)
\{
\fn myCorporate::TPerson::swap(TPerson& other)\brief swap method for elements of this class, swap the paramter with the instance variables of this instance
\param[in] other reference of an other instance of the same type to swap the content

\fn myCorporate::TPerson::init();
\brief method to init this instance with empty / default values (reset it)

\fn myCorporate::TPerson::init(primary_key const& key_values)
\brief method to initialiaze an instance and copy the values of a primary key into it
\param[in] key_values a const reference to primary_key type to init this instance
\returns a reference to the instance

\fn myCorporate::TPerson::copy(TSimplePersonBase const& other);
method to copy instances of the hierachie of classes into another

\}

\name direct data elements from table
\{

\var myCorporate::TPerson::iID
\brief Source: member myCorporate::TPerson::iID in class myCorporate::TPerson with the type std::optional<int>
\details Database: attribute "ID" in entity \ref datamodel_table_Person with database type INT
\details unique identification number for a entity of person

\var myCorporate::TPerson::strName
\brief Source: member myCorporate::TPerson::strName in class myCorporate::TPerson with the type std::optional<std::string>
\details Database: attribute "Name" in entity \ref datamodel_table_Person with database type VARCHAR
\details family name of the natural person respectively the name for a legal entity

\var myCorporate::TPerson::strFirstName
\brief Source: member myCorporate::TPerson::strFirstName in class myCorporate::TPerson with the type std::optional<std::string>
\details Database: attribute "FirstName" in entity \ref datamodel_table_Person with database type VARCHAR
\details first name of the natural person respectively a name extenstion for a legal entity

\var myCorporate::TPerson::strBirthname
\brief Source: member myCorporate::TPerson::strBirthname in class myCorporate::TPerson with the type std::optional<std::string>
\details Database: attribute "Birthname" in entity \ref datamodel_table_Person with database type VARCHAR
\details deviant birthname of the person

\var myCorporate::TPerson::iFormOfAddress
\brief Source: member myCorporate::TPerson::iFormOfAddress in class myCorporate::TPerson with the type std::optional<int>
\details Database: attribute "FormOfAddress" in entity \ref datamodel_table_Person with database type INT
\details form of address for this person. this attribute control the kind of a person too

\var myCorporate::TPerson::iFamilyStatus
\brief Source: member myCorporate::TPerson::iFamilyStatus in class myCorporate::TPerson with the type std::optional<int>
\details Database: attribute "FamilyStatus" in entity \ref datamodel_table_Person with database type INT
\details family status for the person

\var myCorporate::TPerson::daFamilyStatusSince
\brief Source: member myCorporate::TPerson::daFamilyStatusSince in class myCorporate::TPerson with the type std::optional<std::chrono::year_month_day>
\details Database: attribute "FamilyStatusSince" in entity \ref datamodel_table_Person with database type DATE
\details the date from which the current family status applies.

\var myCorporate::TPerson::daBirthday
\brief Source: member myCorporate::TPerson::daBirthday in class myCorporate::TPerson with the type std::optional<std::chrono::year_month_day>
\details Database: attribute "Birthday" in entity \ref datamodel_table_Person with database type DATE
\details birthday of a natural person. This attribute is unused for legal entrities

\var myCorporate::TPerson::strNotes
\brief Source: member myCorporate::TPerson::strNotes in class myCorporate::TPerson with the type std::optional<std::string>
\details Database: attribute "Notes" in entity \ref datamodel_table_Person with database type VARCHAR(MAX)
\details notes, with additional / free information for this tperson, not used in application

\var myCorporate::TPerson::strFullName
\brief Source: member myCorporate::TPerson::strFullName in class myCorporate::TPerson with the type std::optional<std::string>
\details Database: attribute "FullName" in entity \ref datamodel_table_Person with database type VARCHAR
\details calculated field for displaying the full name for use in the program \n for example, if a person is to be selected


\}

\name public selectors with an optional retval for direct access to attributes
\{

\fn std::optional<int> const& myCorporate::TPerson::ID() const
\brief selector for the data element myCorporate::TPerson::iID
\returns std::optional<int> const&: Reference to the data element myCorporate::TPerson::iID
\fn std::optional<std::string> const& myCorporate::TPerson::Name() const
\brief selector for the data element myCorporate::TPerson::strName
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TPerson::strName
\fn std::optional<std::string> const& myCorporate::TPerson::FirstName() const
\brief selector for the data element myCorporate::TPerson::strFirstName
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TPerson::strFirstName
\fn std::optional<std::string> const& myCorporate::TPerson::Birthname() const
\brief selector for the data element myCorporate::TPerson::strBirthname
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TPerson::strBirthname
\fn std::optional<int> const& myCorporate::TPerson::FormOfAddress() const
\brief selector for the data element myCorporate::TPerson::iFormOfAddress
\returns std::optional<int> const&: Reference to the data element myCorporate::TPerson::iFormOfAddress
\fn std::optional<int> const& myCorporate::TPerson::FamilyStatus() const
\brief selector for the data element myCorporate::TPerson::iFamilyStatus
\returns std::optional<int> const&: Reference to the data element myCorporate::TPerson::iFamilyStatus
\fn std::optional<std::chrono::year_month_day> const& myCorporate::TPerson::FamilyStatusSince() const
\brief selector for the data element myCorporate::TPerson::daFamilyStatusSince
\returns std::optional<std::chrono::year_month_day> const&: Reference to the data element myCorporate::TPerson::daFamilyStatusSince
\fn std::optional<std::chrono::year_month_day> const& myCorporate::TPerson::Birthday() const
\brief selector for the data element myCorporate::TPerson::daBirthday
\returns std::optional<std::chrono::year_month_day> const&: Reference to the data element myCorporate::TPerson::daBirthday
\fn std::optional<std::string> const& myCorporate::TPerson::Notes() const
\brief selector for the data element myCorporate::TPerson::strNotes
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TPerson::strNotes
\fn std::optional<std::string> const& myCorporate::TPerson::FullName() const
\brief selector for the data element myCorporate::TPerson::strFullName
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TPerson::strFullName

\}

\name public selectors with an direct access to attributes
\{

\fn int myCorporate::TPerson::_ID() const
\brief special selector for data element myCorporate::TPerson::iID
\details attribute "ID" in entity "Person"
\throws std::runtime::error if the attribute myCorporate::TPerson::iID is empty
\returns int const&: Reference to the data element myCorporate::TPerson::iID
\fn std::string const& myCorporate::TPerson::_Name() const
\brief special selector for data element myCorporate::TPerson::strName
\details attribute "Name" in entity "Person"
\throws std::runtime::error if the attribute myCorporate::TPerson::strName is empty
\returns std::string const& const&: Reference to the data element myCorporate::TPerson::strName
\fn std::string const& myCorporate::TPerson::_FirstName() const
\brief special selector for data element myCorporate::TPerson::strFirstName
\details attribute "FirstName" in entity "Person"
\throws std::runtime::error if the attribute myCorporate::TPerson::strFirstName is empty
\returns std::string const& const&: Reference to the data element myCorporate::TPerson::strFirstName
\fn std::string const& myCorporate::TPerson::_Birthname() const
\brief special selector for data element myCorporate::TPerson::strBirthname
\details attribute "Birthname" in entity "Person"
\throws std::runtime::error if the attribute myCorporate::TPerson::strBirthname is empty
\returns std::string const& const&: Reference to the data element myCorporate::TPerson::strBirthname
\fn int myCorporate::TPerson::_FormOfAddress() const
\brief special selector for data element myCorporate::TPerson::iFormOfAddress
\details attribute "FormOfAddress" in entity "Person"
\throws std::runtime::error if the attribute myCorporate::TPerson::iFormOfAddress is empty
\returns int const&: Reference to the data element myCorporate::TPerson::iFormOfAddress
\fn int myCorporate::TPerson::_FamilyStatus() const
\brief special selector for data element myCorporate::TPerson::iFamilyStatus
\details attribute "FamilyStatus" in entity "Person"
\throws std::runtime::error if the attribute myCorporate::TPerson::iFamilyStatus is empty
\returns int const&: Reference to the data element myCorporate::TPerson::iFamilyStatus
\fn std::chrono::year_month_day myCorporate::TPerson::_FamilyStatusSince() const
\brief special selector for data element myCorporate::TPerson::daFamilyStatusSince
\details attribute "FamilyStatusSince" in entity "Person"
\throws std::runtime::error if the attribute myCorporate::TPerson::daFamilyStatusSince is empty
\returns std::chrono::year_month_day const&: Reference to the data element myCorporate::TPerson::daFamilyStatusSince
\fn std::chrono::year_month_day myCorporate::TPerson::_Birthday() const
\brief special selector for data element myCorporate::TPerson::daBirthday
\details attribute "Birthday" in entity "Person"
\throws std::runtime::error if the attribute myCorporate::TPerson::daBirthday is empty
\returns std::chrono::year_month_day const&: Reference to the data element myCorporate::TPerson::daBirthday
\fn std::string const& myCorporate::TPerson::_Notes() const
\brief special selector for data element myCorporate::TPerson::strNotes
\details attribute "Notes" in entity "Person"
\throws std::runtime::error if the attribute myCorporate::TPerson::strNotes is empty
\returns std::string const& const&: Reference to the data element myCorporate::TPerson::strNotes
\fn std::string const& myCorporate::TPerson::_FullName() const
\brief special selector for data element myCorporate::TPerson::strFullName
\details attribute "FullName" in entity "Person"
\throws std::runtime::error if the attribute myCorporate::TPerson::strFullName is empty
\returns std::string const& const&: Reference to the data element myCorporate::TPerson::strFullName

\}

\name public manipulators for direct access to the attributes
\{

\fn std::optional<int> const& myCorporate::TPerson::ID(std::optional<int> const& newVal)
\brief manipulator for the data element myCorporate::TPerson::iID
\param[in] newVal the new Value for the member myCorporate::TPerson::iID
\returns std::optional<int> const&: Reference to the data element myCorporate::TPerson::iID

\fn std::optional<std::string> const& myCorporate::TPerson::Name(std::optional<std::string> const& newVal)
\brief manipulator for the data element myCorporate::TPerson::strName
\param[in] newVal the new Value for the member myCorporate::TPerson::strName
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TPerson::strName

\fn std::optional<std::string> const& myCorporate::TPerson::FirstName(std::optional<std::string> const& newVal)
\brief manipulator for the data element myCorporate::TPerson::strFirstName
\param[in] newVal the new Value for the member myCorporate::TPerson::strFirstName
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TPerson::strFirstName

\fn std::optional<std::string> const& myCorporate::TPerson::Birthname(std::optional<std::string> const& newVal)
\brief manipulator for the data element myCorporate::TPerson::strBirthname
\param[in] newVal the new Value for the member myCorporate::TPerson::strBirthname
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TPerson::strBirthname

\fn std::optional<int> const& myCorporate::TPerson::FormOfAddress(std::optional<int> const& newVal)
\brief manipulator for the data element myCorporate::TPerson::iFormOfAddress
\param[in] newVal the new Value for the member myCorporate::TPerson::iFormOfAddress
\returns std::optional<int> const&: Reference to the data element myCorporate::TPerson::iFormOfAddress

\fn std::optional<int> const& myCorporate::TPerson::FamilyStatus(std::optional<int> const& newVal)
\brief manipulator for the data element myCorporate::TPerson::iFamilyStatus
\param[in] newVal the new Value for the member myCorporate::TPerson::iFamilyStatus
\returns std::optional<int> const&: Reference to the data element myCorporate::TPerson::iFamilyStatus

\fn std::optional<std::chrono::year_month_day> const& myCorporate::TPerson::FamilyStatusSince(std::optional<std::chrono::year_month_day> const& newVal)
\brief manipulator for the data element myCorporate::TPerson::daFamilyStatusSince
\param[in] newVal the new Value for the member myCorporate::TPerson::daFamilyStatusSince
\returns std::optional<std::chrono::year_month_day> const&: Reference to the data element myCorporate::TPerson::daFamilyStatusSince

\fn std::optional<std::chrono::year_month_day> const& myCorporate::TPerson::Birthday(std::optional<std::chrono::year_month_day> const& newVal)
\brief manipulator for the data element myCorporate::TPerson::daBirthday
\param[in] newVal the new Value for the member myCorporate::TPerson::daBirthday
\returns std::optional<std::chrono::year_month_day> const&: Reference to the data element myCorporate::TPerson::daBirthday

\fn std::optional<std::string> const& myCorporate::TPerson::Notes(std::optional<std::string> const& newVal)
\brief manipulator for the data element myCorporate::TPerson::strNotes
\param[in] newVal the new Value for the member myCorporate::TPerson::strNotes
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TPerson::strNotes


\}

\name private manipulators for direct access to the attributes (for views or calculated fields)
\{

\fn std::optional<std::string> const& myCorporate::TPerson::FullName(std::optional<std::string> const& newVal)
\brief manipulator for the data element myCorporate::TPerson::strFullName
\param[in] newVal the new Value for the member myCorporate::TPerson::strFullName
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TPerson::strFullName


\}


