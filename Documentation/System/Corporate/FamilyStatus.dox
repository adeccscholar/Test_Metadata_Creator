\file System\Corporate/FamilyStatus.h
\brief definition of dataclass myCorporate::TFamilyStatus of table \ref datamodel_table_FamilyStatus with domain / range of values for family status, this is used in person to qualifify the actual status, maybe a date needed too in dictionary "simple person model"
\see table \ref datamodel_table_FamilyStatus
\version 1.0
\author Volker Hillmann (adecc Scholar)
\date 22.03.2024  file created with adecc Scholar metadata generator
<HR>
\copyright &copy; adecc Systemhaus GmbH 2024, All rights reserved.
<BR>This project is released under the MIT License.


\file System\Corporate/FamilyStatus.cpp
\brief implementation of dataclass myCorporate::TFamilyStatus of table \ref datamodel_table_FamilyStatus with domain / range of values for family status, this is used in person to qualifify the actual status, maybe a date needed too in dictionary "simple person model"
\see table \ref datamodel_table_FamilyStatus
\version 1.0
\author Volker Hillmann (adecc Scholar)
\date 22.03.2024  file created with adecc Scholar metadata generator
<HR>
\copyright &copy; adecc Systemhaus GmbH 2024, All rights reserved.
<BR>This project is released under the MIT License.


\class myCorporate::TFamilyStatus
\brief domain / range of values for family status, this is used in person to qualifify the actual status, maybe a date needed too
\author Volker Hillmann (adecc Scholar)
\date 22.03.2024 documentation for this project created
\see system class for the table \ref datamodel_table_FamilyStatus

\class myCorporate::TFamilyStatus::primary_key
\brief primary key for elements of the class myCorporate::TFamilyStatus in a container or when seeking an entity in the database.

\fn myCorporate::TFamilyStatus::primary_key::primary_key()
\brief standard constructor for the class myCorporate::TFamilyStatus::primary_key

\fn myCorporate::TFamilyStatus::primary_key::primary_key(primary_key const& other)
\brief copy constructor for the class myCorporate::TFamilyStatus::primary_key
\param [in] other primary_key const& with the instance which values should be copied

\fn myCorporate::TFamilyStatus::primary_key::primary_key(primary_key&&)
\brief move constructor for the class myCorporate::TFamilyStatus::primary_key
\param [in] other primary_key&& with the instance which values should be occupied and moved to this instance

\fn myCorporate::TFamilyStatus::primary_key::primary_key(TFamilyStatus const& other)
\brief initializing constructor with an instance of the encircling class myCorporate::TFamilyStatus for the class myCorporate::TFamilyStatus::primary_key
\note this constructor can't be constexpr because the direct manipulator of the encircling class may throw an exception
\throws std::runtime_error when a data element in the encircling class is empty
\param [in] other myCorporate::TFamilyStatus const& with the instance of the encircling class which values should be copied

\fn myCorporate::TFamilyStatus::primary_key::~primary_key()
\brief destructor for the primary_key class

\fn myCorporate::TFamilyStatus::primary_key::primary_key(int pID)
\brief initializing constructor with the values for key attributes of the primary_key class
\param [in] pID int  with unique identification number for a record in this domain with family status

\var myCorporate::TFamilyStatus::primary_key::iID
\brief unique identification number for a record in this domain with family status
\details Source: key member myCorporate::TFamilyStatus::primary_key::iID in class myCorporate::TFamilyStatus::primary_key with the type int
\details Database: primary key attribute "ID" in entity \ref datamodel_table_FamilyStatus with database type INT
\fn myCorporate::TFamilyStatus::primary_key::ID() const
\brief selector for the data element myCorporate::TFamilyStatus::primary_key::iID
\returns int with the value for this member.
\fn myCorporate::TFamilyStatus::primary_key::ID(int newVal)
\brief manipulator for the data element myCorporate::TFamilyStatus::primary_key::iID
\param[in] newVal int with the value of the member.
\returns int with the new value for this member.
\fn myCorporate::TFamilyStatus::primary_key::operator TFamilyStatus () const
\brief conversion operator for the encircling class
\returns value of an instance of the encircling class myCorporate::TFamilyStatus

\fn myCorporate::TFamilyStatus::primary_key::write(std::ostream& out) const
\brief method to write all elements of the instance to an std::ostream
\param[in] out reference to a std::ostream as target to write data for this instance of the class myCorporate::TFamilyStatus::primary_key
\returns reference to the std::ostream to continue writing after call of this function

\fn myCorporate::TFamilyStatus::primary_key::_compare(primary_key const&) const
\brief internal help function to compare the current instance with to another instance of the same class.
\details the comparison is performed using a lambda function, "comp_help", which compares two objects and returns -1 if the left - hand side (lhs) is less than the right - hand side(rhs), 1 if lhs is greater than rhs, and 0 if they are equal. the member while compared in the order they are in the dictionary one after the other, so long the values of the both instances are equal.
\param [in] other a constant reference to another object of the same class whose is being compared with the current object's values.
\return an integer value representing the result of the comparison:
<ul><li> returns  0 if the values of both objects are equal.</li>
<li>returns -1 if the values of the current object is less than values of the other object.</li>
<li>returns  1 if the values of the current object are greater than the values of the other object.</li>
</ul>
\fn myCorporate::TFamilyStatus::primary_key::operator == (primary_key const&) const
\brief checks whether the object is equal to another object of the same primary key class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the objects are equal, false otherwise.

\fn myCorporate::TFamilyStatus::primary_key::operator != (primary_key const&) const
\brief checks whether the object is not equal to another object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the objects are not equal, false otherwise.

\fn myCorporate::TFamilyStatus::primary_key::operator < (primary_key const&) const
\brief checks whether the object is less than the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is less than to the other object, false otherwise.

\fn myCorporate::TFamilyStatus::primary_key::operator <= (primary_key const&) const
\brief checks whether the object is less than or equal to the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is less than or equal to the other object, false otherwise.

\fn myCorporate::TFamilyStatus::primary_key::operator > (primary_key const&) const
\brief checks whether the object is greater than the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is greater than to the other object, false otherwise.

\fn myCorporate::TFamilyStatus::primary_key::operator >= (primary_key const&) const
\brief checks whether the object is greater than or equal the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is greater than or equal to the other object, false otherwise.

\typedef myCorporate::TFamilyStatus::container_ty
\brief container type as std::map with the generated primary key type myCorporate::TFamilyStatus::primary_key for instances of this class

\details The type uses the key type myCorporate::TFamilyStatus::primary_keypreviously created from the key attributes of table \ref datamodel_table_FamilyStatus as the key_type for the container to hold values of this class as value_type.
This means that the same rules apply in the database and the program, and the data can be assigned quickly.

\typedef myCorporate::TFamilyStatus::vector_ty
\brief container type as vector for elements of this class.
\details you can use a sort order to read data into this container or work with this later.

\fn myCorporate::TFamilyStatus::GetKey() const
\brief method to get the primary key for this instance
\returns type myCorporate::TFamilyStatus
\throws std::runtime::error if the attribute(s) of the primary key are empty.


\name constructors and destructor for this class
\{

\fn myCorporate::TFamilyStatus::TFamilyStatus()
\brief standard constructor for TFamilyStatus

\fn myCorporate::TFamilyStatus::TFamilyStatus(TFamilyStatus const& other)
\brief copy constructor for TFamilyStatus
\param[in] other reference of an instance of an other instance of myCorporate::TFamilyStatus to copy

\fn myCorporate::TFamilyStatus::TFamilyStatus(TFamilyStatus&&)
\brief rvalue constructor for TFamilyStatus

\fn myCorporate::TFamilyStatus::~TFamilyStatus()
\brief destructor for TFamilyStatus
\}

\name public functions for this class (following the framework for this project)
\{
\fn myCorporate::TFamilyStatus::swap(TFamilyStatus& other)\brief swap method for elements of this class, swap the paramter with the instance variables of this instance
\param[in] other reference of an other instance of the same type to swap the content

\fn myCorporate::TFamilyStatus::init();
\brief method to init this instance with empty / default values (reset it)

\fn myCorporate::TFamilyStatus::init(primary_key const& key_values)
\brief method to initialiaze an instance and copy the values of a primary key into it
\param[in] key_values a const reference to primary_key type to init this instance
\returns a reference to the instance

\fn myCorporate::TFamilyStatus::copy(TSimplePersonBase const& other);
method to copy instances of the hierachie of classes into another

\}

\name direct data elements from table
\{

\var myCorporate::TFamilyStatus::iID
\brief unique identification number for a record in this domain with family status
\details Source: member myCorporate::TFamilyStatus::iID in class myCorporate::TFamilyStatus with the type std::optional<int>
\details Database: attribute "ID" in entity \ref datamodel_table_FamilyStatus with database type INT

\var myCorporate::TFamilyStatus::strDenotation
\brief unique description of a family status entity in the domain, used in selections, comboboxes, … (key canditate)
\details Source: member myCorporate::TFamilyStatus::strDenotation in class myCorporate::TFamilyStatus with the type std::optional<std::string>
\details Database: attribute "Denotation" in entity \ref datamodel_table_FamilyStatus with database type VARCHAR

\var myCorporate::TFamilyStatus::strAbbreviation
\brief non-representative abbreviation that can be used for a short advertisement for this family status
\details Source: member myCorporate::TFamilyStatus::strAbbreviation in class myCorporate::TFamilyStatus with the type std::optional<std::string>
\details Database: attribute "Abbreviation" in entity \ref datamodel_table_FamilyStatus with database type VARCHAR

\var myCorporate::TFamilyStatus::strDescription
\brief detailed description of these family status,this is a self documentation, possible use as hint or to information in the programm
\details Source: member myCorporate::TFamilyStatus::strDescription in class myCorporate::TFamilyStatus with the type std::optional<std::string>
\details Database: attribute "Description" in entity \ref datamodel_table_FamilyStatus with database type VARCHAR(MAX)

\var myCorporate::TFamilyStatus::boCoupled
\brief boolean value that show if persones with this status are coupled and possibly receive tax relief
\details Source: member myCorporate::TFamilyStatus::boCoupled in class myCorporate::TFamilyStatus with the type std::optional<bool>
\details Database: attribute "Coupled" in entity \ref datamodel_table_FamilyStatus with database type TINYINT

\var myCorporate::TFamilyStatus::boNeedDate
\brief boolean value which determine that the date when the person status changed the last time needed. 
\details Source: member myCorporate::TFamilyStatus::boNeedDate in class myCorporate::TFamilyStatus with the type std::optional<bool>
\details Database: attribute "NeedDate" in entity \ref datamodel_table_FamilyStatus with database type TINYINT

\var myCorporate::TFamilyStatus::strNotes
\brief notes, with additional / free information for this type of family status, not used in application
\details Source: member myCorporate::TFamilyStatus::strNotes in class myCorporate::TFamilyStatus with the type std::optional<std::string>
\details Database: attribute "Notes" in entity \ref datamodel_table_FamilyStatus with database type VARCHAR(MAX)

\var myCorporate::TFamilyStatus::boUrgentValue
\brief boolean value that makes this entity of phone type to a system value (cannot be changed as it is used directly by the program)
\details Source: member myCorporate::TFamilyStatus::boUrgentValue in class myCorporate::TFamilyStatus with the type std::optional<bool>
\details Database: attribute "UrgentValue" in entity \ref datamodel_table_FamilyStatus with database type TINYINT


\}

\name public selectors with an optional retval for direct access to attributes
\{

\fn std::optional<int> const& myCorporate::TFamilyStatus::ID() const
\brief selector for the data element myCorporate::TFamilyStatus::iID
\details <b>unique identification number for a record in this domain with family status</b>
\returns std::optional<int> const&: Reference to the data element myCorporate::TFamilyStatus::iID
\fn std::optional<std::string> const& myCorporate::TFamilyStatus::Denotation() const
\brief selector for the data element myCorporate::TFamilyStatus::strDenotation
\details <b>unique description of a family status entity in the domain, used in selections, comboboxes, … (key canditate)</b>
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TFamilyStatus::strDenotation
\fn std::optional<std::string> const& myCorporate::TFamilyStatus::Abbreviation() const
\brief selector for the data element myCorporate::TFamilyStatus::strAbbreviation
\details <b>non-representative abbreviation that can be used for a short advertisement for this family status</b>
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TFamilyStatus::strAbbreviation
\fn std::optional<std::string> const& myCorporate::TFamilyStatus::Description() const
\brief selector for the data element myCorporate::TFamilyStatus::strDescription
\details <b>detailed description of these family status,this is a self documentation, possible use as hint or to information in the programm</b>
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TFamilyStatus::strDescription
\fn std::optional<bool> const& myCorporate::TFamilyStatus::Coupled() const
\brief selector for the data element myCorporate::TFamilyStatus::boCoupled
\details <b>boolean value that show if persones with this status are coupled and possibly receive tax relief</b>
\returns std::optional<bool> const&: Reference to the data element myCorporate::TFamilyStatus::boCoupled
\fn std::optional<bool> const& myCorporate::TFamilyStatus::NeedDate() const
\brief selector for the data element myCorporate::TFamilyStatus::boNeedDate
\details <b>boolean value which determine that the date when the person status changed the last time needed. </b>
\returns std::optional<bool> const&: Reference to the data element myCorporate::TFamilyStatus::boNeedDate
\fn std::optional<std::string> const& myCorporate::TFamilyStatus::Notes() const
\brief selector for the data element myCorporate::TFamilyStatus::strNotes
\details <b>notes, with additional / free information for this type of family status, not used in application</b>
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TFamilyStatus::strNotes
\fn std::optional<bool> const& myCorporate::TFamilyStatus::UrgentValue() const
\brief selector for the data element myCorporate::TFamilyStatus::boUrgentValue
\details <b>boolean value that makes this entity of phone type to a system value (cannot be changed as it is used directly by the program)</b>
\returns std::optional<bool> const&: Reference to the data element myCorporate::TFamilyStatus::boUrgentValue

\}

\name public selectors with an direct access to attributes
\{

\fn int myCorporate::TFamilyStatus::_ID() const
\brief special selector for data element myCorporate::TFamilyStatus::iID
\details unique identification number for a record in this domain with family status
\details <b>unique identification number for a record in this domain with family status</b>
\throws std::runtime::error if the attribute myCorporate::TFamilyStatus::iID is empty
\returns int const&: Reference to the data element myCorporate::TFamilyStatus::iID
\fn std::string const& myCorporate::TFamilyStatus::_Denotation() const
\brief special selector for data element myCorporate::TFamilyStatus::strDenotation
\details unique description of a family status entity in the domain, used in selections, comboboxes, … (key canditate)
\details <b>unique description of a family status entity in the domain, used in selections, comboboxes, … (key canditate)</b>
\throws std::runtime::error if the attribute myCorporate::TFamilyStatus::strDenotation is empty
\returns std::string const& const&: Reference to the data element myCorporate::TFamilyStatus::strDenotation
\fn std::string const& myCorporate::TFamilyStatus::_Abbreviation() const
\brief special selector for data element myCorporate::TFamilyStatus::strAbbreviation
\details non-representative abbreviation that can be used for a short advertisement for this family status
\details <b>non-representative abbreviation that can be used for a short advertisement for this family status</b>
\throws std::runtime::error if the attribute myCorporate::TFamilyStatus::strAbbreviation is empty
\returns std::string const& const&: Reference to the data element myCorporate::TFamilyStatus::strAbbreviation
\fn std::string const& myCorporate::TFamilyStatus::_Description() const
\brief special selector for data element myCorporate::TFamilyStatus::strDescription
\details detailed description of these family status,this is a self documentation, possible use as hint or to information in the programm
\details <b>detailed description of these family status,this is a self documentation, possible use as hint or to information in the programm</b>
\throws std::runtime::error if the attribute myCorporate::TFamilyStatus::strDescription is empty
\returns std::string const& const&: Reference to the data element myCorporate::TFamilyStatus::strDescription
\fn bool myCorporate::TFamilyStatus::_Coupled() const
\brief special selector for data element myCorporate::TFamilyStatus::boCoupled
\details boolean value that show if persones with this status are coupled and possibly receive tax relief
\details <b>boolean value that show if persones with this status are coupled and possibly receive tax relief</b>
\throws std::runtime::error if the attribute myCorporate::TFamilyStatus::boCoupled is empty
\returns bool const&: Reference to the data element myCorporate::TFamilyStatus::boCoupled
\fn bool myCorporate::TFamilyStatus::_NeedDate() const
\brief special selector for data element myCorporate::TFamilyStatus::boNeedDate
\details boolean value which determine that the date when the person status changed the last time needed. 
\details <b>boolean value which determine that the date when the person status changed the last time needed. </b>
\throws std::runtime::error if the attribute myCorporate::TFamilyStatus::boNeedDate is empty
\returns bool const&: Reference to the data element myCorporate::TFamilyStatus::boNeedDate
\fn std::string const& myCorporate::TFamilyStatus::_Notes() const
\brief special selector for data element myCorporate::TFamilyStatus::strNotes
\details notes, with additional / free information for this type of family status, not used in application
\details <b>notes, with additional / free information for this type of family status, not used in application</b>
\throws std::runtime::error if the attribute myCorporate::TFamilyStatus::strNotes is empty
\returns std::string const& const&: Reference to the data element myCorporate::TFamilyStatus::strNotes
\fn bool myCorporate::TFamilyStatus::_UrgentValue() const
\brief special selector for data element myCorporate::TFamilyStatus::boUrgentValue
\details boolean value that makes this entity of phone type to a system value (cannot be changed as it is used directly by the program)
\details <b>boolean value that makes this entity of phone type to a system value (cannot be changed as it is used directly by the program)</b>
\throws std::runtime::error if the attribute myCorporate::TFamilyStatus::boUrgentValue is empty
\returns bool const&: Reference to the data element myCorporate::TFamilyStatus::boUrgentValue

\}

\name public manipulators for direct access to the attributes
\{

\fn std::optional<int> const& myCorporate::TFamilyStatus::ID(std::optional<int> const& newVal)
\brief manipulator for the data element myCorporate::TFamilyStatus::iID
\details <b>unique identification number for a record in this domain with family status</b>
\param[in] newVal the new Value for the member myCorporate::TFamilyStatus::iID
\returns std::optional<int> const&: Reference to the data element myCorporate::TFamilyStatus::iID

\fn std::optional<std::string> const& myCorporate::TFamilyStatus::Denotation(std::optional<std::string> const& newVal)
\brief manipulator for the data element myCorporate::TFamilyStatus::strDenotation
\details <b>unique description of a family status entity in the domain, used in selections, comboboxes, … (key canditate)</b>
\param[in] newVal the new Value for the member myCorporate::TFamilyStatus::strDenotation
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TFamilyStatus::strDenotation

\fn std::optional<std::string> const& myCorporate::TFamilyStatus::Abbreviation(std::optional<std::string> const& newVal)
\brief manipulator for the data element myCorporate::TFamilyStatus::strAbbreviation
\details <b>non-representative abbreviation that can be used for a short advertisement for this family status</b>
\param[in] newVal the new Value for the member myCorporate::TFamilyStatus::strAbbreviation
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TFamilyStatus::strAbbreviation

\fn std::optional<std::string> const& myCorporate::TFamilyStatus::Description(std::optional<std::string> const& newVal)
\brief manipulator for the data element myCorporate::TFamilyStatus::strDescription
\details <b>detailed description of these family status,this is a self documentation, possible use as hint or to information in the programm</b>
\param[in] newVal the new Value for the member myCorporate::TFamilyStatus::strDescription
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TFamilyStatus::strDescription

\fn std::optional<bool> const& myCorporate::TFamilyStatus::Coupled(std::optional<bool> const& newVal)
\brief manipulator for the data element myCorporate::TFamilyStatus::boCoupled
\details <b>boolean value that show if persones with this status are coupled and possibly receive tax relief</b>
\param[in] newVal the new Value for the member myCorporate::TFamilyStatus::boCoupled
\returns std::optional<bool> const&: Reference to the data element myCorporate::TFamilyStatus::boCoupled

\fn std::optional<bool> const& myCorporate::TFamilyStatus::NeedDate(std::optional<bool> const& newVal)
\brief manipulator for the data element myCorporate::TFamilyStatus::boNeedDate
\details <b>boolean value which determine that the date when the person status changed the last time needed. </b>
\param[in] newVal the new Value for the member myCorporate::TFamilyStatus::boNeedDate
\returns std::optional<bool> const&: Reference to the data element myCorporate::TFamilyStatus::boNeedDate

\fn std::optional<std::string> const& myCorporate::TFamilyStatus::Notes(std::optional<std::string> const& newVal)
\brief manipulator for the data element myCorporate::TFamilyStatus::strNotes
\details <b>notes, with additional / free information for this type of family status, not used in application</b>
\param[in] newVal the new Value for the member myCorporate::TFamilyStatus::strNotes
\returns std::optional<std::string> const&: Reference to the data element myCorporate::TFamilyStatus::strNotes

\fn std::optional<bool> const& myCorporate::TFamilyStatus::UrgentValue(std::optional<bool> const& newVal)
\brief manipulator for the data element myCorporate::TFamilyStatus::boUrgentValue
\details <b>boolean value that makes this entity of phone type to a system value (cannot be changed as it is used directly by the program)</b>
\param[in] newVal the new Value for the member myCorporate::TFamilyStatus::boUrgentValue
\returns std::optional<bool> const&: Reference to the data element myCorporate::TFamilyStatus::boUrgentValue


\}


