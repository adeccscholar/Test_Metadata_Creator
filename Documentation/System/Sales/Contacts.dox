\file System\Sales/Contacts.h
\brief definition of dataclass mySales::TContacts of table \ref datamodel_table_Contacts with information to the data of a contact person at the customer  (inherited from Person) in dictionary "simple person model"
\see table \ref datamodel_table_Contacts
\version 1.0
\author Volker Hillmann (adecc Scholar)
\date 22.03.2024  file created with adecc Scholar metadata generator
<HR>
\copyright &copy; adecc Systemhaus GmbH 2024, All rights reserved.
<BR>This project is released under the MIT License.


\file System\Sales/Contacts.cpp
\brief implementation of dataclass mySales::TContacts of table \ref datamodel_table_Contacts with information to the data of a contact person at the customer  (inherited from Person) in dictionary "simple person model"
\see table \ref datamodel_table_Contacts
\version 1.0
\author Volker Hillmann (adecc Scholar)
\date 22.03.2024  file created with adecc Scholar metadata generator
<HR>
\copyright &copy; adecc Systemhaus GmbH 2024, All rights reserved.
<BR>This project is released under the MIT License.


\class mySales::TContacts
\brief information to the data of a contact person at the customer  (inherited from Person)
\details this class is inherited by following class(es):
<table>
<tr><th>class</th><th>table</th><th>file</th></tr>
<tr><td>myCorporate::TPerson</td>    <td>\ref datamodel_table_Person</td>    <td>System\Corporate/Person.h</td></tr></table>

\author Volker Hillmann (adecc Scholar)
\date 22.03.2024 documentation for this project created
\see system class for the table \ref datamodel_table_Contacts

\class mySales::TContacts::primary_key
\brief primary key for elements of the class mySales::TContacts in a container or when seeking an entity in the database.

\fn mySales::TContacts::primary_key::primary_key()
\brief standard constructor for the class mySales::TContacts::primary_key

\fn mySales::TContacts::primary_key::primary_key(primary_key const& other)
\brief copy constructor for the class mySales::TContacts::primary_key
\param [in] other primary_key const& with the instance which values should be copied

\fn mySales::TContacts::primary_key::primary_key(primary_key&&)
\brief move constructor for the class mySales::TContacts::primary_key
\param [in] other primary_key&& with the instance which values should be occupied and moved to this instance

\fn mySales::TContacts::primary_key::primary_key(TContacts const& other)
\brief initializing constructor with an instance of the encircling class mySales::TContacts for the class mySales::TContacts::primary_key
\note this constructor can't be constexpr because the direct manipulator of the encircling class may throw an exception
\throws std::runtime_error when a data element in the encircling class is empty
\param [in] other mySales::TContacts const& with the instance of the encircling class which values should be copied

\fn mySales::TContacts::primary_key::~primary_key()
\brief destructor for the primary_key class

\fn mySales::TContacts::primary_key::primary_key(int pContactID)
\brief initializing constructor with the values for key attributes of the primary_key class
\param [in] pContactID int  with internal id for this contact, attribute as foreign key from an attribute ID of a person entity 

\var mySales::TContacts::primary_key::iContactID
\brief internal id for this contact, attribute as foreign key from an attribute ID of a person entity 
\details Source: key member mySales::TContacts::primary_key::iContactID in class mySales::TContacts::primary_key with the type int
\details Database: primary key attribute "ContactID" in entity \ref datamodel_table_Contacts with database type INT
\fn mySales::TContacts::primary_key::ContactID() const
\brief selector for the data element mySales::TContacts::primary_key::iContactID
\returns int with the value for this member.
\fn mySales::TContacts::primary_key::ContactID(int newVal)
\brief manipulator for the data element mySales::TContacts::primary_key::iContactID
\param[in] newVal int with the value of the member.
\returns int with the new value for this member.
\fn mySales::TContacts::primary_key::operator TContacts () const
\brief conversion operator for the encircling class
\returns value of an instance of the encircling class mySales::TContacts

\fn mySales::TContacts::primary_key::write(std::ostream& out) const
\brief method to write all elements of the instance to an std::ostream
\param[in] out reference to a std::ostream as target to write data for this instance of the class mySales::TContacts::primary_key
\returns reference to the std::ostream to continue writing after call of this function

\fn mySales::TContacts::primary_key::_compare(primary_key const&) const
\brief internal help function to compare the current instance with to another instance of the same class.
\details the comparison is performed using a lambda function, "comp_help", which compares two objects and returns -1 if the left - hand side (lhs) is less than the right - hand side(rhs), 1 if lhs is greater than rhs, and 0 if they are equal. the member while compared in the order they are in the dictionary one after the other, so long the values of the both instances are equal.
\param [in] other a constant reference to another object of the same class whose is being compared with the current object's values.
\return an integer value representing the result of the comparison:
<ul><li> returns  0 if the values of both objects are equal.</li>
<li>returns -1 if the values of the current object is less than values of the other object.</li>
<li>returns  1 if the values of the current object are greater than the values of the other object.</li>
</ul>
\fn mySales::TContacts::primary_key::operator == (primary_key const&) const
\brief checks whether the object is equal to another object of the same primary key class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the objects are equal, false otherwise.

\fn mySales::TContacts::primary_key::operator != (primary_key const&) const
\brief checks whether the object is not equal to another object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the objects are not equal, false otherwise.

\fn mySales::TContacts::primary_key::operator < (primary_key const&) const
\brief checks whether the object is less than the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is less than to the other object, false otherwise.

\fn mySales::TContacts::primary_key::operator <= (primary_key const&) const
\brief checks whether the object is less than or equal to the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is less than or equal to the other object, false otherwise.

\fn mySales::TContacts::primary_key::operator > (primary_key const&) const
\brief checks whether the object is greater than the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is greater than to the other object, false otherwise.

\fn mySales::TContacts::primary_key::operator >= (primary_key const&) const
\brief checks whether the object is greater than or equal the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is greater than or equal to the other object, false otherwise.

\typedef mySales::TContacts::container_ty
\brief container type as std::map with the generated primary key type mySales::TContacts::primary_key for instances of this class

\details The type uses the key type mySales::TContacts::primary_keypreviously created from the key attributes of table \ref datamodel_table_Contacts as the key_type for the container to hold values of this class as value_type.
This means that the same rules apply in the database and the program, and the data can be assigned quickly.

\typedef mySales::TContacts::vector_ty
\brief container type as vector for elements of this class.
\details you can use a sort order to read data into this container or work with this later.

\fn mySales::TContacts::GetKey() const
\brief method to get the primary key for this instance
\returns type mySales::TContacts
\throws std::runtime::error if the attribute(s) of the primary key are empty.


\name constructors and destructor for this class
\{

\fn mySales::TContacts::TContacts()
\brief standard constructor for TContacts

\fn mySales::TContacts::TContacts(TContacts const& other)
\brief copy constructor for TContacts
\param[in] other reference of an instance of an other instance of mySales::TContacts to copy

\fn mySales::TContacts::TContacts(TContacts&&)
\brief rvalue constructor for TContacts

\fn mySales::TContacts::~TContacts()
\brief destructor for TContacts
\}

\name public functions for this class (following the framework for this project)
\{
\fn mySales::TContacts::swap(TContacts& other)\brief swap method for elements of this class, swap the paramter with the instance variables of this instance
\param[in] other reference of an other instance of the same type to swap the content

\fn mySales::TContacts::init();
\brief method to init this instance with empty / default values (reset it)

\fn mySales::TContacts::init(primary_key const& key_values)
\brief method to initialiaze an instance and copy the values of a primary key into it
\param[in] key_values a const reference to primary_key type to init this instance
\returns a reference to the instance

\fn mySales::TContacts::copy(myCorporate::TSimplePersonBase const& other);
method to copy instances of the hierachie of classes into another

\}

\name direct data elements from table
\{

\var mySales::TContacts::iContactID
\brief internal id for this contact, attribute as foreign key from an attribute ID of a person entity 
\details Source: member mySales::TContacts::iContactID in class mySales::TContacts with the type std::optional<int>
\details Database: attribute "ContactID" in entity \ref datamodel_table_Contacts with database type INT

\var mySales::TContacts::iCustID
\brief Customer identification number of the contact associated customer.
\details Source: member mySales::TContacts::iCustID in class mySales::TContacts with the type std::optional<int>
\details Database: attribute "CustID" in entity \ref datamodel_table_Contacts with database type INT

\var mySales::TContacts::iCustLiaison
\brief liaision for this contact person as range value (from table CustLiasion)
\details Source: member mySales::TContacts::iCustLiaison in class mySales::TContacts with the type std::optional<int>
\details Database: attribute "CustLiaison" in entity \ref datamodel_table_Contacts with database type INT


\}

\name public selectors with an optional retval for direct access to attributes
\{

\fn std::optional<int> const& mySales::TContacts::ContactID() const
\brief selector for the data element mySales::TContacts::iContactID
\details <b>internal id for this contact, attribute as foreign key from an attribute ID of a person entity </b>
\returns std::optional<int> const&: Reference to the data element mySales::TContacts::iContactID
\fn std::optional<int> const& mySales::TContacts::CustID() const
\brief selector for the data element mySales::TContacts::iCustID
\details <b>Customer identification number of the contact associated customer.</b>
\returns std::optional<int> const&: Reference to the data element mySales::TContacts::iCustID
\fn std::optional<int> const& mySales::TContacts::CustLiaison() const
\brief selector for the data element mySales::TContacts::iCustLiaison
\details <b>liaision for this contact person as range value (from table CustLiasion)</b>
\returns std::optional<int> const&: Reference to the data element mySales::TContacts::iCustLiaison

\}

\name public selectors with an direct access to attributes
\{

\fn int mySales::TContacts::_ContactID() const
\brief special selector for data element mySales::TContacts::iContactID
\details internal id for this contact, attribute as foreign key from an attribute ID of a person entity 
\details <b>internal id for this contact, attribute as foreign key from an attribute ID of a person entity </b>
\throws std::runtime::error if the attribute mySales::TContacts::iContactID is empty
\returns int const&: Reference to the data element mySales::TContacts::iContactID
\fn int mySales::TContacts::_CustID() const
\brief special selector for data element mySales::TContacts::iCustID
\details Customer identification number of the contact associated customer.
\details <b>Customer identification number of the contact associated customer.</b>
\throws std::runtime::error if the attribute mySales::TContacts::iCustID is empty
\returns int const&: Reference to the data element mySales::TContacts::iCustID
\fn int mySales::TContacts::_CustLiaison() const
\brief special selector for data element mySales::TContacts::iCustLiaison
\details liaision for this contact person as range value (from table CustLiasion)
\details <b>liaision for this contact person as range value (from table CustLiasion)</b>
\throws std::runtime::error if the attribute mySales::TContacts::iCustLiaison is empty
\returns int const&: Reference to the data element mySales::TContacts::iCustLiaison

\}

\name public manipulators for direct access to the attributes
\{

\fn std::optional<int> const& mySales::TContacts::ContactID(std::optional<int> const& newVal)
\brief manipulator for the data element mySales::TContacts::iContactID
\details <b>internal id for this contact, attribute as foreign key from an attribute ID of a person entity </b>
\param[in] newVal the new Value for the member mySales::TContacts::iContactID
\returns std::optional<int> const&: Reference to the data element mySales::TContacts::iContactID

\fn std::optional<int> const& mySales::TContacts::CustID(std::optional<int> const& newVal)
\brief manipulator for the data element mySales::TContacts::iCustID
\details <b>Customer identification number of the contact associated customer.</b>
\param[in] newVal the new Value for the member mySales::TContacts::iCustID
\returns std::optional<int> const&: Reference to the data element mySales::TContacts::iCustID

\fn std::optional<int> const& mySales::TContacts::CustLiaison(std::optional<int> const& newVal)
\brief manipulator for the data element mySales::TContacts::iCustLiaison
\details <b>liaision for this contact person as range value (from table CustLiasion)</b>
\param[in] newVal the new Value for the member mySales::TContacts::iCustLiaison
\returns std::optional<int> const&: Reference to the data element mySales::TContacts::iCustLiaison


\}


