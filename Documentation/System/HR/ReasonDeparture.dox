\file System\HR/ReasonDeparture.h
\brief definition of dataclass myHR::TReasonDeparture of table \ref datamodel_table_ReasonDeparture with doman range with the reason of departure of the employee in dictionary "simple person model"
\see table \ref datamodel_table_ReasonDeparture
\version 1.0
\author Volker Hillmann (adecc Scholar)
\date 17.03.2024  file created with adecc Scholar metadata generator
<HR>
\copyright &copy; adecc Systemhaus GmbH 2024, All rights reserved.
<BR>This project is released under the MIT License.


\file System\HR/ReasonDeparture.cpp
\brief implementation of dataclass myHR::TReasonDeparture of table \ref datamodel_table_ReasonDeparture with doman range with the reason of departure of the employee in dictionary "simple person model"
\see table \ref datamodel_table_ReasonDeparture
\version 1.0
\author Volker Hillmann (adecc Scholar)
\date 17.03.2024  file created with adecc Scholar metadata generator
<HR>
\copyright &copy; adecc Systemhaus GmbH 2024, All rights reserved.
<BR>This project is released under the MIT License.


\class myHR::TReasonDeparture
\brief doman range with the reason of departure of the employee
\author Volker Hillmann (adecc Scholar)
\date 17.03.2024 documentation for this project created
\see system class for the table \ref datamodel_table_ReasonDeparture

\class myHR::TReasonDeparture::primary_key
\brief primary key for elements of the class myHR::TReasonDeparture in a container or when seeking an entity in the database.

\fn myHR::TReasonDeparture::primary_key::primary_key()
\brief standard constructor for the class myHR::TReasonDeparture::primary_key

\fn myHR::TReasonDeparture::primary_key::primary_key(primary_key const& other)
\brief copy constructor for the class myHR::TReasonDeparture::primary_key
\param [in] other primary_key const& with the instance which values should be copied

\fn myHR::TReasonDeparture::primary_key::primary_key(primary_key&&)
\brief move constructor for the class myHR::TReasonDeparture::primary_key
\param [in] other primary_key&& with the instance which values should be occupied and moved to this instance

\fn myHR::TReasonDeparture::primary_key::primary_key(TReasonDeparture const& other)
\brief initializing constructor with an instance of the encircling class myHR::TReasonDeparture for the class myHR::TReasonDeparture::primary_key
\note this constructor can't be constexpr because the direct manipulator of the encircling class may throw an exception
\throws std::runtime_error when a data element in the encircling class is empty
\param [in] other myHR::TReasonDeparture const& with the instance of the encircling class which values should be copied

\fn myHR::TReasonDeparture::primary_key::~primary_key()
\brief destructor for the primary_key class

\fn myHR::TReasonDeparture::primary_key::primary_key(int pID)
\brief initializing constructor with the values for key attributes of the primary_key class
\param [in] pID int  with unique identification number / id of the reason of the departure

\var myHR::TReasonDeparture::primary_key::iID
\brief unique identification number / id of the reason of the departure
\details Source: key member myHR::TReasonDeparture::primary_key::iID in class myHR::TReasonDeparture::primary_key with the type int
\details Database: primary key attribute "ID" in entity \ref datamodel_table_ReasonDeparture with database type INT
\fn myHR::TReasonDeparture::primary_key::ID() const
\brief selector for the data element myHR::TReasonDeparture::primary_key::iID
\returns int with the value for this member.
\fn myHR::TReasonDeparture::primary_key::ID(int newVal)
\brief manipulator for the data element myHR::TReasonDeparture::primary_key::iID
\param[in] newVal int with the value of the member.
\returns int with the new value for this member.
\fn myHR::TReasonDeparture::primary_key::operator TReasonDeparture () const
\brief conversion operator for the encircling class
\returns value of an instance of the encircling class myHR::TReasonDeparture

\fn myHR::TReasonDeparture::primary_key::_compare(primary_key const&) const
\brief internal help function to compare the current instance with to another instance of the same class.
\details the comparison is performed using a lambda function, "comp_help", which compares two objects and returns -1 if the left - hand side (lhs) is less than the right - hand side(rhs), 1 if lhs is greater than rhs, and 0 if they are equal. the member while compared in the order they are in the dictionary one after the other, so long the values of the both instances are equal.
\param [in] other a constant reference to another object of the same class whose is being compared with the current object's values.
\return an integer value representing the result of the comparison:
<ul><li> returns  0 if the values of both objects are equal.</li>
<li>returns -1 if the values of the current object is less than values of the other object.</li>
<li>returns  1 if the values of the current object are greater than the values of the other object.</li>
</ul>
\fn myHR::TReasonDeparture::primary_key::operator == (primary_key const&) const
\brief checks whether the object is equal to another object of the same primary key class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the objects are equal, false otherwise.

\fn myHR::TReasonDeparture::primary_key::operator != (primary_key const&) const
\brief checks whether the object is not equal to another object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the objects are not equal, false otherwise.

\fn myHR::TReasonDeparture::primary_key::operator < (primary_key const&) const
\brief checks whether the object is less than the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is less than to the other object, false otherwise.

\fn myHR::TReasonDeparture::primary_key::operator <= (primary_key const&) const
\brief checks whether the object is less than or equal to the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is less than or equal to the other object, false otherwise.

\fn myHR::TReasonDeparture::primary_key::operator > (primary_key const&) const
\brief checks whether the object is greater than the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is greater than to the other object, false otherwise.

\fn myHR::TReasonDeparture::primary_key::operator >= (primary_key const&) const
\brief checks whether the object is greater than or equal the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is greater than or equal to the other object, false otherwise.

\typedef myHR::TReasonDeparture::container_ty
\brief container type as std::map with the generated primary key type myHR::TReasonDeparture::primary_key for instances of this class

\details The type uses the key type myHR::TReasonDeparture::primary_keypreviously created from the key attributes of table \ref datamodel_table_ReasonDeparture as the key_type for the container to hold values of this class as value_type.
This means that the same rules apply in the database and the program, and the data can be assigned quickly.

\typedef myHR::TReasonDeparture::vector_ty
\brief container type as vector for elements of this class.
\details you can use a sort order to read data into this container or work with this later.

\fn myHR::TReasonDeparture::GetKey() const
\brief method to get the primary key for this instance
\returns type myHR::TReasonDeparture
\throw std::runtime::error if the attribute(s) of the primary key are empty.


\name constructors and destructor for this class
\{

\fn myHR::TReasonDeparture::TReasonDeparture()
\brief standard constructor for TReasonDeparture

\fn myHR::TReasonDeparture::TReasonDeparture(TReasonDeparture const& other)
\brief copy constructor for TReasonDeparture
\param[in] other reference of an instance of an other instance of myHR::TReasonDeparture to copy

\fn myHR::TReasonDeparture::TReasonDeparture(TReasonDeparture&&)
\brief rvalue constructor for TReasonDeparture

\fn myHR::TReasonDeparture::~TReasonDeparture()
\brief destructor for TReasonDeparture
\}

\name public functions for this class (following the framework for this project)
\{
\fn myHR::TReasonDeparture::swap(TReasonDeparture& other)\brief swap method for elements of this class, swap the paramter with the instance variables of this instance
\param[in] other reference of an other instance of the same type to swap the content

\fn myHR::TReasonDeparture::init();
\brief method to init this instance with empty / default values (reset it)

\fn myHR::TReasonDeparture::init(primary_key const& key_values)
\brief method to initialiaze an instance and copy the values of a primary key into it
\param[in] key_values a const reference to primary_key type to init this instance
\returns a reference to the instance

\fn myHR::TReasonDeparture::copy(myCorporate::TSimplePersonBase const& other);
method to copy instances of the hierachie of classes into another

\}

\name direct data elements from table
\{

\var myHR::TReasonDeparture::iID
\brief unique identification number / id of the reason of the departure
\details Source: member myHR::TReasonDeparture::iID in class myHR::TReasonDeparture with the type std::optional<int>
\details Database: attribute "ID" in entity \ref datamodel_table_ReasonDeparture with database type INT

\var myHR::TReasonDeparture::strDenotation
\brief unique denotation for the reason of the departure
\details Source: member myHR::TReasonDeparture::strDenotation in class myHR::TReasonDeparture with the type std::optional<std::string>
\details Database: attribute "Denotation" in entity \ref datamodel_table_ReasonDeparture with database type VARCHAR

\var myHR::TReasonDeparture::strAbbreviation
\brief abbreviation for the reason of the departure, used in the application for a compact display
\details Source: member myHR::TReasonDeparture::strAbbreviation in class myHR::TReasonDeparture with the type std::optional<std::string>
\details Database: attribute "Abbreviation" in entity \ref datamodel_table_ReasonDeparture with database type VARCHAR

\var myHR::TReasonDeparture::strDescription
\brief description as long text for the reason of the departure, used in the application for detailed informations
\details Source: member myHR::TReasonDeparture::strDescription in class myHR::TReasonDeparture with the type std::optional<std::string>
\details Database: attribute "Description" in entity \ref datamodel_table_ReasonDeparture with database type VARCHAR(MAX)

\var myHR::TReasonDeparture::strNotes
\brief notes, with additional / free information for the reason of the departure, not used in the application
\details Source: member myHR::TReasonDeparture::strNotes in class myHR::TReasonDeparture with the type std::optional<std::string>
\details Database: attribute "Notes" in entity \ref datamodel_table_ReasonDeparture with database type VARCHAR(MAX)

\var myHR::TReasonDeparture::boUrgentValue
\brief boolean value that makes this entity of reason of departure to a system value (cannot be changed as it is used directly by the program)
\details Source: member myHR::TReasonDeparture::boUrgentValue in class myHR::TReasonDeparture with the type std::optional<bool>
\details Database: attribute "UrgentValue" in entity \ref datamodel_table_ReasonDeparture with database type TINYINT


\}

\name public selectors with an optional retval for direct access to attributes
\{

\fn std::optional<int> const& myHR::TReasonDeparture::ID() const
\brief selector for the data element myHR::TReasonDeparture::iID
\details <b>unique identification number / id of the reason of the departure</b>
\returns std::optional<int> const&: Reference to the data element myHR::TReasonDeparture::iID
\fn std::optional<std::string> const& myHR::TReasonDeparture::Denotation() const
\brief selector for the data element myHR::TReasonDeparture::strDenotation
\details <b>unique denotation for the reason of the departure</b>
\returns std::optional<std::string> const&: Reference to the data element myHR::TReasonDeparture::strDenotation
\fn std::optional<std::string> const& myHR::TReasonDeparture::Abbreviation() const
\brief selector for the data element myHR::TReasonDeparture::strAbbreviation
\details <b>abbreviation for the reason of the departure, used in the application for a compact display</b>
\returns std::optional<std::string> const&: Reference to the data element myHR::TReasonDeparture::strAbbreviation
\fn std::optional<std::string> const& myHR::TReasonDeparture::Description() const
\brief selector for the data element myHR::TReasonDeparture::strDescription
\details <b>description as long text for the reason of the departure, used in the application for detailed informations</b>
\returns std::optional<std::string> const&: Reference to the data element myHR::TReasonDeparture::strDescription
\fn std::optional<std::string> const& myHR::TReasonDeparture::Notes() const
\brief selector for the data element myHR::TReasonDeparture::strNotes
\details <b>notes, with additional / free information for the reason of the departure, not used in the application</b>
\returns std::optional<std::string> const&: Reference to the data element myHR::TReasonDeparture::strNotes
\fn std::optional<bool> const& myHR::TReasonDeparture::UrgentValue() const
\brief selector for the data element myHR::TReasonDeparture::boUrgentValue
\details <b>boolean value that makes this entity of reason of departure to a system value (cannot be changed as it is used directly by the program)</b>
\returns std::optional<bool> const&: Reference to the data element myHR::TReasonDeparture::boUrgentValue

\}

\name public selectors with an direct access to attributes
\{

\fn int myHR::TReasonDeparture::_ID() const
\brief special selector for data element myHR::TReasonDeparture::iID
\details unique identification number / id of the reason of the departure
\details <b>unique identification number / id of the reason of the departure</b>
\throw std::runtime::error if the attribute myHR::TReasonDeparture::iID is empty
\returns int const&: Reference to the data element myHR::TReasonDeparture::iID
\fn std::string const& myHR::TReasonDeparture::_Denotation() const
\brief special selector for data element myHR::TReasonDeparture::strDenotation
\details unique denotation for the reason of the departure
\details <b>unique denotation for the reason of the departure</b>
\throw std::runtime::error if the attribute myHR::TReasonDeparture::strDenotation is empty
\returns std::string const& const&: Reference to the data element myHR::TReasonDeparture::strDenotation
\fn std::string const& myHR::TReasonDeparture::_Abbreviation() const
\brief special selector for data element myHR::TReasonDeparture::strAbbreviation
\details abbreviation for the reason of the departure, used in the application for a compact display
\details <b>abbreviation for the reason of the departure, used in the application for a compact display</b>
\throw std::runtime::error if the attribute myHR::TReasonDeparture::strAbbreviation is empty
\returns std::string const& const&: Reference to the data element myHR::TReasonDeparture::strAbbreviation
\fn std::string const& myHR::TReasonDeparture::_Description() const
\brief special selector for data element myHR::TReasonDeparture::strDescription
\details description as long text for the reason of the departure, used in the application for detailed informations
\details <b>description as long text for the reason of the departure, used in the application for detailed informations</b>
\throw std::runtime::error if the attribute myHR::TReasonDeparture::strDescription is empty
\returns std::string const& const&: Reference to the data element myHR::TReasonDeparture::strDescription
\fn std::string const& myHR::TReasonDeparture::_Notes() const
\brief special selector for data element myHR::TReasonDeparture::strNotes
\details notes, with additional / free information for the reason of the departure, not used in the application
\details <b>notes, with additional / free information for the reason of the departure, not used in the application</b>
\throw std::runtime::error if the attribute myHR::TReasonDeparture::strNotes is empty
\returns std::string const& const&: Reference to the data element myHR::TReasonDeparture::strNotes
\fn bool myHR::TReasonDeparture::_UrgentValue() const
\brief special selector for data element myHR::TReasonDeparture::boUrgentValue
\details boolean value that makes this entity of reason of departure to a system value (cannot be changed as it is used directly by the program)
\details <b>boolean value that makes this entity of reason of departure to a system value (cannot be changed as it is used directly by the program)</b>
\throw std::runtime::error if the attribute myHR::TReasonDeparture::boUrgentValue is empty
\returns bool const&: Reference to the data element myHR::TReasonDeparture::boUrgentValue

\}

\name public manipulators for direct access to the attributes
\{

\fn std::optional<int> const& myHR::TReasonDeparture::ID(std::optional<int> const& newVal)
\brief manipulator for the data element myHR::TReasonDeparture::iID
\details <b>unique identification number / id of the reason of the departure</b>
\param[in] newVal the new Value for the member myHR::TReasonDeparture::iID
\returns std::optional<int> const&: Reference to the data element myHR::TReasonDeparture::iID

\fn std::optional<std::string> const& myHR::TReasonDeparture::Denotation(std::optional<std::string> const& newVal)
\brief manipulator for the data element myHR::TReasonDeparture::strDenotation
\details <b>unique denotation for the reason of the departure</b>
\param[in] newVal the new Value for the member myHR::TReasonDeparture::strDenotation
\returns std::optional<std::string> const&: Reference to the data element myHR::TReasonDeparture::strDenotation

\fn std::optional<std::string> const& myHR::TReasonDeparture::Abbreviation(std::optional<std::string> const& newVal)
\brief manipulator for the data element myHR::TReasonDeparture::strAbbreviation
\details <b>abbreviation for the reason of the departure, used in the application for a compact display</b>
\param[in] newVal the new Value for the member myHR::TReasonDeparture::strAbbreviation
\returns std::optional<std::string> const&: Reference to the data element myHR::TReasonDeparture::strAbbreviation

\fn std::optional<std::string> const& myHR::TReasonDeparture::Description(std::optional<std::string> const& newVal)
\brief manipulator for the data element myHR::TReasonDeparture::strDescription
\details <b>description as long text for the reason of the departure, used in the application for detailed informations</b>
\param[in] newVal the new Value for the member myHR::TReasonDeparture::strDescription
\returns std::optional<std::string> const&: Reference to the data element myHR::TReasonDeparture::strDescription

\fn std::optional<std::string> const& myHR::TReasonDeparture::Notes(std::optional<std::string> const& newVal)
\brief manipulator for the data element myHR::TReasonDeparture::strNotes
\details <b>notes, with additional / free information for the reason of the departure, not used in the application</b>
\param[in] newVal the new Value for the member myHR::TReasonDeparture::strNotes
\returns std::optional<std::string> const&: Reference to the data element myHR::TReasonDeparture::strNotes

\fn std::optional<bool> const& myHR::TReasonDeparture::UrgentValue(std::optional<bool> const& newVal)
\brief manipulator for the data element myHR::TReasonDeparture::boUrgentValue
\details <b>boolean value that makes this entity of reason of departure to a system value (cannot be changed as it is used directly by the program)</b>
\param[in] newVal the new Value for the member myHR::TReasonDeparture::boUrgentValue
\returns std::optional<bool> const&: Reference to the data element myHR::TReasonDeparture::boUrgentValue


\}


