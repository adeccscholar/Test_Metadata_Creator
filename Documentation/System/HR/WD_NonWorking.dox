\file System\HR/WD_NonWorking.h
\brief definition of dataclass myHR::TWD_NonWorking of table \ref datamodel_table_WD_NonWorking with entity set with non working days. Extensions possible, responsible for this table is HR. in dictionary "simple person model"
\see table \ref datamodel_table_WD_NonWorking
\version 1.0
\author Volker Hillmann (adecc Scholar)
\date 17.03.2024  file created with adecc Scholar metadata generator
<HR>
\copyright &copy; adecc Systemhaus GmbH 2024, All rights reserved.
<BR>This project is released under the MIT License.


\file System\HR/WD_NonWorking.cpp
\brief implementation of dataclass myHR::TWD_NonWorking of table \ref datamodel_table_WD_NonWorking with entity set with non working days. Extensions possible, responsible for this table is HR. in dictionary "simple person model"
\see table \ref datamodel_table_WD_NonWorking
\version 1.0
\author Volker Hillmann (adecc Scholar)
\date 17.03.2024  file created with adecc Scholar metadata generator
<HR>
\copyright &copy; adecc Systemhaus GmbH 2024, All rights reserved.
<BR>This project is released under the MIT License.


\class myHR::TWD_NonWorking
\brief entity set with non working days. Extensions possible, responsible for this table is HR.
\author Volker Hillmann (adecc Scholar)
\date 17.03.2024 documentation for this project created
\see system class for the table \ref datamodel_table_WD_NonWorking

\class myHR::TWD_NonWorking::primary_key
\brief primary key for elements of the class myHR::TWD_NonWorking in a container or when seeking an entity in the database.

\fn myHR::TWD_NonWorking::primary_key::primary_key()
\brief standard constructor for the class myHR::TWD_NonWorking::primary_key

\fn myHR::TWD_NonWorking::primary_key::primary_key(primary_key const& other)
\brief copy constructor for the class myHR::TWD_NonWorking::primary_key
\param [in] other primary_key const& with the instance which values should be copied

\fn myHR::TWD_NonWorking::primary_key::primary_key(primary_key&&)
\brief move constructor for the class myHR::TWD_NonWorking::primary_key
\param [in] other primary_key&& with the instance which values should be occupied and moved to this instance

\fn myHR::TWD_NonWorking::primary_key::primary_key(TWD_NonWorking const& other)
\brief initializing constructor with an instance of the encircling class myHR::TWD_NonWorking for the class myHR::TWD_NonWorking::primary_key
\note this constructor can't be constexpr because the direct manipulator of the encircling class may throw an exception
\throws std::runtime_error when a data element in the encircling class is empty
\param [in] other myHR::TWD_NonWorking const& with the instance of the encircling class which values should be copied

\fn myHR::TWD_NonWorking::primary_key::~primary_key()
\brief destructor for the primary_key class

\fn myHR::TWD_NonWorking::primary_key::primary_key(int pID, std::chrono::year_month_day pStartAt)
\brief initializing constructor with the values for key attributes of the primary_key class
\param [in] pID int  with attribute as foreign key from an attribute ID of a employee entity to who as idle this time
\param [in] pStartAt std::chrono::year_month_day  with date when the non working time starts as foreign key from the wokdays table

\var myHR::TWD_NonWorking::primary_key::iID
\brief attribute as foreign key from an attribute ID of a employee entity to who as idle this time
\details Source: key member myHR::TWD_NonWorking::primary_key::iID in class myHR::TWD_NonWorking::primary_key with the type int
\details Database: primary key attribute "ID" in entity \ref datamodel_table_WD_NonWorking with database type INT
\fn myHR::TWD_NonWorking::primary_key::ID() const
\brief selector for the data element myHR::TWD_NonWorking::primary_key::iID
\returns int with the value for this member.
\fn myHR::TWD_NonWorking::primary_key::ID(int newVal)
\brief manipulator for the data element myHR::TWD_NonWorking::primary_key::iID
\param[in] newVal int with the value of the member.
\returns int with the new value for this member.
\var myHR::TWD_NonWorking::primary_key::daStartAt
\brief date when the non working time starts as foreign key from the wokdays table
\details Source: key member myHR::TWD_NonWorking::primary_key::daStartAt in class myHR::TWD_NonWorking::primary_key with the type std::chrono::year_month_day
\details Database: primary key attribute "StartAt" in entity \ref datamodel_table_WD_NonWorking with database type DATE
\fn myHR::TWD_NonWorking::primary_key::StartAt() const
\brief selector for the data element myHR::TWD_NonWorking::primary_key::daStartAt
\returns std::chrono::year_month_day with the value for this member.
\fn myHR::TWD_NonWorking::primary_key::StartAt(std::chrono::year_month_day newVal)
\brief manipulator for the data element myHR::TWD_NonWorking::primary_key::daStartAt
\param[in] newVal std::chrono::year_month_day with the value of the member.
\returns std::chrono::year_month_day with the new value for this member.
\fn myHR::TWD_NonWorking::primary_key::operator TWD_NonWorking () const
\brief conversion operator for the encircling class
\returns value of an instance of the encircling class myHR::TWD_NonWorking

\fn myHR::TWD_NonWorking::primary_key::_compare(primary_key const&) const
\brief internal help function to compare the current instance with to another instance of the same class.
\details the comparison is performed using a lambda function, "comp_help", which compares two objects and returns -1 if the left - hand side (lhs) is less than the right - hand side(rhs), 1 if lhs is greater than rhs, and 0 if they are equal. the member while compared in the order they are in the dictionary one after the other, so long the values of the both instances are equal.
\param [in] other a constant reference to another object of the same class whose is being compared with the current object's values.
\return an integer value representing the result of the comparison:
<ul><li> returns  0 if the values of both objects are equal.</li>
<li>returns -1 if the values of the current object is less than values of the other object.</li>
<li>returns  1 if the values of the current object are greater than the values of the other object.</li>
</ul>
\fn myHR::TWD_NonWorking::primary_key::operator == (primary_key const&) const
\brief checks whether the object is equal to another object of the same primary key class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the objects are equal, false otherwise.

\fn myHR::TWD_NonWorking::primary_key::operator != (primary_key const&) const
\brief checks whether the object is not equal to another object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the objects are not equal, false otherwise.

\fn myHR::TWD_NonWorking::primary_key::operator < (primary_key const&) const
\brief checks whether the object is less than the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is less than to the other object, false otherwise.

\fn myHR::TWD_NonWorking::primary_key::operator <= (primary_key const&) const
\brief checks whether the object is less than or equal to the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is less than or equal to the other object, false otherwise.

\fn myHR::TWD_NonWorking::primary_key::operator > (primary_key const&) const
\brief checks whether the object is greater than the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is greater than to the other object, false otherwise.

\fn myHR::TWD_NonWorking::primary_key::operator >= (primary_key const&) const
\brief checks whether the object is greater than or equal the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is greater than or equal to the other object, false otherwise.

\typedef myHR::TWD_NonWorking::container_ty
\brief container type as std::map with the generated primary key type myHR::TWD_NonWorking::primary_key for instances of this class

\details The type uses the key type myHR::TWD_NonWorking::primary_keypreviously created from the key attributes of table \ref datamodel_table_WD_NonWorking as the key_type for the container to hold values of this class as value_type.
This means that the same rules apply in the database and the program, and the data can be assigned quickly.

\typedef myHR::TWD_NonWorking::vector_ty
\brief container type as vector for elements of this class.
\details you can use a sort order to read data into this container or work with this later.

\fn myHR::TWD_NonWorking::GetKey() const
\brief method to get the primary key for this instance
\returns type myHR::TWD_NonWorking
\throw std::runtime::error if the attribute(s) of the primary key are empty.


\name constructors and destructor for this class
\{

\fn myHR::TWD_NonWorking::TWD_NonWorking()
\brief standard constructor for TWD_NonWorking

\fn myHR::TWD_NonWorking::TWD_NonWorking(TWD_NonWorking const& other)
\brief copy constructor for TWD_NonWorking
\param[in] other reference of an instance of an other instance of myHR::TWD_NonWorking to copy

\fn myHR::TWD_NonWorking::TWD_NonWorking(TWD_NonWorking&&)
\brief rvalue constructor for TWD_NonWorking

\fn myHR::TWD_NonWorking::~TWD_NonWorking()
\brief destructor for TWD_NonWorking
\}

\name public functions for this class (following the framework for this project)
\{
\fn myHR::TWD_NonWorking::swap(TWD_NonWorking& other)\brief swap method for elements of this class, swap the paramter with the instance variables of this instance
\param[in] other reference of an other instance of the same type to swap the content

\fn myHR::TWD_NonWorking::init();
\brief method to init this instance with empty / default values (reset it)

\fn myHR::TWD_NonWorking::init(primary_key const& key_values)
\brief method to initialiaze an instance and copy the values of a primary key into it
\param[in] key_values a const reference to primary_key type to init this instance
\returns a reference to the instance

\fn myHR::TWD_NonWorking::copy(myCorporate::TSimplePersonBase const& other);
method to copy instances of the hierachie of classes into another

\}

\name direct data elements from table
\{

\var myHR::TWD_NonWorking::iID
\brief attribute as foreign key from an attribute ID of a employee entity to who as idle this time
\details Source: member myHR::TWD_NonWorking::iID in class myHR::TWD_NonWorking with the type std::optional<int>
\details Database: attribute "ID" in entity \ref datamodel_table_WD_NonWorking with database type INT

\var myHR::TWD_NonWorking::daStartAt
\brief date when the non working time starts as foreign key from the wokdays table
\details Source: member myHR::TWD_NonWorking::daStartAt in class myHR::TWD_NonWorking with the type std::optional<std::chrono::year_month_day>
\details Database: attribute "StartAt" in entity \ref datamodel_table_WD_NonWorking with database type DATE

\var myHR::TWD_NonWorking::daClosingAt
\brief date when the non working time finishing. Value must exists in workdays, but isn't in the key. May be open
\details Source: member myHR::TWD_NonWorking::daClosingAt in class myHR::TWD_NonWorking with the type std::optional<std::chrono::year_month_day>
\details Database: attribute "ClosingAt" in entity \ref datamodel_table_WD_NonWorking with database type DATE

\var myHR::TWD_NonWorking::iReason
\brief reason of non working time, there exist a table, but values are interpreted through the applications
\details Source: member myHR::TWD_NonWorking::iReason in class myHR::TWD_NonWorking with the type std::optional<int>
\details Database: attribute "Reason" in entity \ref datamodel_table_WD_NonWorking with database type INT

\var myHR::TWD_NonWorking::strNotes
\brief free notices to the non-working time
\details Source: member myHR::TWD_NonWorking::strNotes in class myHR::TWD_NonWorking with the type std::optional<std::string>
\details Database: attribute "Notes" in entity \ref datamodel_table_WD_NonWorking with database type VARCHAR(MAX)


\}

\name public selectors with an optional retval for direct access to attributes
\{

\fn std::optional<int> const& myHR::TWD_NonWorking::ID() const
\brief selector for the data element myHR::TWD_NonWorking::iID
\details <b>attribute as foreign key from an attribute ID of a employee entity to who as idle this time</b>
\returns std::optional<int> const&: Reference to the data element myHR::TWD_NonWorking::iID
\fn std::optional<std::chrono::year_month_day> const& myHR::TWD_NonWorking::StartAt() const
\brief selector for the data element myHR::TWD_NonWorking::daStartAt
\details <b>date when the non working time starts as foreign key from the wokdays table</b>
\returns std::optional<std::chrono::year_month_day> const&: Reference to the data element myHR::TWD_NonWorking::daStartAt
\fn std::optional<std::chrono::year_month_day> const& myHR::TWD_NonWorking::ClosingAt() const
\brief selector for the data element myHR::TWD_NonWorking::daClosingAt
\details <b>date when the non working time finishing. Value must exists in workdays, but isn't in the key. May be open</b>
\returns std::optional<std::chrono::year_month_day> const&: Reference to the data element myHR::TWD_NonWorking::daClosingAt
\fn std::optional<int> const& myHR::TWD_NonWorking::Reason() const
\brief selector for the data element myHR::TWD_NonWorking::iReason
\details <b>reason of non working time, there exist a table, but values are interpreted through the applications</b>
\returns std::optional<int> const&: Reference to the data element myHR::TWD_NonWorking::iReason
\fn std::optional<std::string> const& myHR::TWD_NonWorking::Notes() const
\brief selector for the data element myHR::TWD_NonWorking::strNotes
\details <b>free notices to the non-working time</b>
\returns std::optional<std::string> const&: Reference to the data element myHR::TWD_NonWorking::strNotes

\}

\name public selectors with an direct access to attributes
\{

\fn int myHR::TWD_NonWorking::_ID() const
\brief special selector for data element myHR::TWD_NonWorking::iID
\details attribute as foreign key from an attribute ID of a employee entity to who as idle this time
\details <b>attribute as foreign key from an attribute ID of a employee entity to who as idle this time</b>
\throw std::runtime::error if the attribute myHR::TWD_NonWorking::iID is empty
\returns int const&: Reference to the data element myHR::TWD_NonWorking::iID
\fn std::chrono::year_month_day myHR::TWD_NonWorking::_StartAt() const
\brief special selector for data element myHR::TWD_NonWorking::daStartAt
\details date when the non working time starts as foreign key from the wokdays table
\details <b>date when the non working time starts as foreign key from the wokdays table</b>
\throw std::runtime::error if the attribute myHR::TWD_NonWorking::daStartAt is empty
\returns std::chrono::year_month_day const&: Reference to the data element myHR::TWD_NonWorking::daStartAt
\fn std::chrono::year_month_day myHR::TWD_NonWorking::_ClosingAt() const
\brief special selector for data element myHR::TWD_NonWorking::daClosingAt
\details date when the non working time finishing. Value must exists in workdays, but isn't in the key. May be open
\details <b>date when the non working time finishing. Value must exists in workdays, but isn't in the key. May be open</b>
\throw std::runtime::error if the attribute myHR::TWD_NonWorking::daClosingAt is empty
\returns std::chrono::year_month_day const&: Reference to the data element myHR::TWD_NonWorking::daClosingAt
\fn int myHR::TWD_NonWorking::_Reason() const
\brief special selector for data element myHR::TWD_NonWorking::iReason
\details reason of non working time, there exist a table, but values are interpreted through the applications
\details <b>reason of non working time, there exist a table, but values are interpreted through the applications</b>
\throw std::runtime::error if the attribute myHR::TWD_NonWorking::iReason is empty
\returns int const&: Reference to the data element myHR::TWD_NonWorking::iReason
\fn std::string const& myHR::TWD_NonWorking::_Notes() const
\brief special selector for data element myHR::TWD_NonWorking::strNotes
\details free notices to the non-working time
\details <b>free notices to the non-working time</b>
\throw std::runtime::error if the attribute myHR::TWD_NonWorking::strNotes is empty
\returns std::string const& const&: Reference to the data element myHR::TWD_NonWorking::strNotes

\}

\name public manipulators for direct access to the attributes
\{

\fn std::optional<int> const& myHR::TWD_NonWorking::ID(std::optional<int> const& newVal)
\brief manipulator for the data element myHR::TWD_NonWorking::iID
\details <b>attribute as foreign key from an attribute ID of a employee entity to who as idle this time</b>
\param[in] newVal the new Value for the member myHR::TWD_NonWorking::iID
\returns std::optional<int> const&: Reference to the data element myHR::TWD_NonWorking::iID

\fn std::optional<std::chrono::year_month_day> const& myHR::TWD_NonWorking::StartAt(std::optional<std::chrono::year_month_day> const& newVal)
\brief manipulator for the data element myHR::TWD_NonWorking::daStartAt
\details <b>date when the non working time starts as foreign key from the wokdays table</b>
\param[in] newVal the new Value for the member myHR::TWD_NonWorking::daStartAt
\returns std::optional<std::chrono::year_month_day> const&: Reference to the data element myHR::TWD_NonWorking::daStartAt

\fn std::optional<std::chrono::year_month_day> const& myHR::TWD_NonWorking::ClosingAt(std::optional<std::chrono::year_month_day> const& newVal)
\brief manipulator for the data element myHR::TWD_NonWorking::daClosingAt
\details <b>date when the non working time finishing. Value must exists in workdays, but isn't in the key. May be open</b>
\param[in] newVal the new Value for the member myHR::TWD_NonWorking::daClosingAt
\returns std::optional<std::chrono::year_month_day> const&: Reference to the data element myHR::TWD_NonWorking::daClosingAt

\fn std::optional<int> const& myHR::TWD_NonWorking::Reason(std::optional<int> const& newVal)
\brief manipulator for the data element myHR::TWD_NonWorking::iReason
\details <b>reason of non working time, there exist a table, but values are interpreted through the applications</b>
\param[in] newVal the new Value for the member myHR::TWD_NonWorking::iReason
\returns std::optional<int> const&: Reference to the data element myHR::TWD_NonWorking::iReason

\fn std::optional<std::string> const& myHR::TWD_NonWorking::Notes(std::optional<std::string> const& newVal)
\brief manipulator for the data element myHR::TWD_NonWorking::strNotes
\details <b>free notices to the non-working time</b>
\param[in] newVal the new Value for the member myHR::TWD_NonWorking::strNotes
\returns std::optional<std::string> const&: Reference to the data element myHR::TWD_NonWorking::strNotes


\}


