\file System\HR/WD_Months.h
\brief definition of dataclass myHR::TWD_Months of table \ref datamodel_table_WD_Months with domain with months for human resources, actually used for working time, later for processes too. This range make it possible additional informations to adding later. This isn't a typical range value. in dictionary "simple person model"
\see table \ref datamodel_table_WD_Months
\version 1.0
\author Volker Hillmann (adecc Scholar)
\date 22.04.2025  file created with adecc Scholar metadata generator
<HR>
\copyright &copy; adecc Systemhaus GmbH 2024, All rights reserved.
<BR>This project is released under the MIT License.


\file System\HR/WD_Months.cpp
\brief implementation of dataclass myHR::TWD_Months of table \ref datamodel_table_WD_Months with domain with months for human resources, actually used for working time, later for processes too. This range make it possible additional informations to adding later. This isn't a typical range value. in dictionary "simple person model"
\see table \ref datamodel_table_WD_Months
\version 1.0
\author Volker Hillmann (adecc Scholar)
\date 22.04.2025  file created with adecc Scholar metadata generator
<HR>
\copyright &copy; adecc Systemhaus GmbH 2024, All rights reserved.
<BR>This project is released under the MIT License.


\class myHR::TWD_Months
\brief domain with months for human resources, actually used for working time, later for processes too. This range make it possible additional informations to adding later. This isn't a typical range value.
\author Volker Hillmann (adecc Scholar)
\date 22.04.2025 documentation for this project created
\see system class for the table \ref datamodel_table_WD_Months

\class myHR::TWD_Months::primary_key
\brief primary key for elements of the class myHR::TWD_Months in a container or when seeking an entity in the database.

\fn myHR::TWD_Months::primary_key::primary_key()
\brief standard constructor for the class myHR::TWD_Months::primary_key

\fn myHR::TWD_Months::primary_key::primary_key(primary_key const& other)
\brief copy constructor for the class myHR::TWD_Months::primary_key
\param [in] other primary_key const& with the instance which values should be copied

\fn myHR::TWD_Months::primary_key::primary_key(primary_key&&)
\brief move constructor for the class myHR::TWD_Months::primary_key
\param [in] other primary_key&& with the instance which values should be occupied and moved to this instance

\fn myHR::TWD_Months::primary_key::primary_key(TWD_Months const& other)
\brief initializing constructor with an instance of the encircling class myHR::TWD_Months for the class myHR::TWD_Months::primary_key
\note this constructor can't be constexpr because the direct manipulator of the encircling class may throw an exception
\throws std::runtime_error when a data element in the encircling class is empty
\param [in] other myHR::TWD_Months const& with the instance of the encircling class which values should be copied

\fn myHR::TWD_Months::primary_key::~primary_key()
\brief destructor for the primary_key class

\fn myHR::TWD_Months::primary_key::primary_key(int pID)
\brief initializing constructor with the values for key attributes of the primary_key class
\param [in] pID int  with 

\var myHR::TWD_Months::primary_key::iID
\brief Source: key member myHR::TWD_Months::primary_key::iID in class myHR::TWD_Months::primary_key with the type int
\details Database: primary key attribute "ID" in entity \ref datamodel_table_WD_Months with database type INT
\fn myHR::TWD_Months::primary_key::ID() const
\brief selector for the data element myHR::TWD_Months::primary_key::iID
\returns int with the value for this member.
\fn myHR::TWD_Months::primary_key::ID(int newVal)
\brief manipulator for the data element myHR::TWD_Months::primary_key::iID
\param[in] newVal int with the value of the member.
\returns int with the new value for this member.
\fn myHR::TWD_Months::primary_key::operator TWD_Months () const
\brief conversion operator for the encircling class
\returns value of an instance of the encircling class myHR::TWD_Months

\fn myHR::TWD_Months::primary_key::write(std::ostream& out) const
\brief method to write all elements of the instance to an std::ostream
\param[in] out reference to a std::ostream as target to write data for this instance of the class myHR::TWD_Months::primary_key
\returns reference to the std::ostream to continue writing after call of this function

\fn myHR::TWD_Months::primary_key::_compare(primary_key const&) const
\brief internal help function to compare the current instance with to another instance of the same class.
\details the comparison is performed using a lambda function, "comp_help", which compares two objects and returns -1 if the left - hand side (lhs) is less than the right - hand side(rhs), 1 if lhs is greater than rhs, and 0 if they are equal. the member while compared in the order they are in the dictionary one after the other, so long the values of the both instances are equal.
\param [in] other a constant reference to another object of the same class whose is being compared with the current object's values.
\return an integer value representing the result of the comparison:
<ul><li> returns  0 if the values of both objects are equal.</li>
<li>returns -1 if the values of the current object is less than values of the other object.</li>
<li>returns  1 if the values of the current object are greater than the values of the other object.</li>
</ul>
\fn myHR::TWD_Months::primary_key::operator == (primary_key const&) const
\brief checks whether the object is equal to another object of the same primary key class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the objects are equal, false otherwise.

\fn myHR::TWD_Months::primary_key::operator != (primary_key const&) const
\brief checks whether the object is not equal to another object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the objects are not equal, false otherwise.

\fn myHR::TWD_Months::primary_key::operator < (primary_key const&) const
\brief checks whether the object is less than the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is less than to the other object, false otherwise.

\fn myHR::TWD_Months::primary_key::operator <= (primary_key const&) const
\brief checks whether the object is less than or equal to the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is less than or equal to the other object, false otherwise.

\fn myHR::TWD_Months::primary_key::operator > (primary_key const&) const
\brief checks whether the object is greater than the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is greater than to the other object, false otherwise.

\fn myHR::TWD_Months::primary_key::operator >= (primary_key const&) const
\brief checks whether the object is greater than or equal the other object of the same class.
\details this operator use the internal function primary_key::_compare() as implemetation and compare the member in the sequence they are found in the dictionary.\param other a constant reference to another object of the same class primary_key.
\return boolean value, true if the object is greater than or equal to the other object, false otherwise.

\typedef myHR::TWD_Months::container_ty
\brief container type as std::map with the generated primary key type myHR::TWD_Months::primary_key for instances of this class

\details The type uses the key type myHR::TWD_Months::primary_keypreviously created from the key attributes of table \ref datamodel_table_WD_Months as the key_type for the container to hold values of this class as value_type.
This means that the same rules apply in the database and the program, and the data can be assigned quickly.

\typedef myHR::TWD_Months::vector_ty
\brief container type as vector for elements of this class.
\details you can use a sort order to read data into this container or work with this later.

\fn myHR::TWD_Months::GetKey() const
\brief method to get the primary key for this instance
\returns type myHR::TWD_Months
\throws std::runtime::error if the attribute(s) of the primary key are empty.


\name constructors and destructor for this class
\{

\fn myHR::TWD_Months::TWD_Months()
\brief standard constructor for TWD_Months

\fn myHR::TWD_Months::TWD_Months(TWD_Months const& other)
\brief copy constructor for TWD_Months
\param[in] other reference of an instance of an other instance of myHR::TWD_Months to copy

\fn myHR::TWD_Months::TWD_Months(TWD_Months&&)
\brief rvalue constructor for TWD_Months

\fn myHR::TWD_Months::~TWD_Months()
\brief destructor for TWD_Months
\}

\name public functions for this class (following the framework for this project)
\{
\fn myHR::TWD_Months::swap(TWD_Months& other)\brief swap method for elements of this class, swap the paramter with the instance variables of this instance
\param[in] other reference of an other instance of the same type to swap the content

\fn myHR::TWD_Months::init();
\brief method to init this instance with empty / default values (reset it)

\fn myHR::TWD_Months::init(primary_key const& key_values)
\brief method to initialiaze an instance and copy the values of a primary key into it
\param[in] key_values a const reference to primary_key type to init this instance
\returns a reference to the instance

\fn myHR::TWD_Months::copy(myCorporate::TSimplePersonBase const& other);
method to copy instances of the hierachie of classes into another

\}

\name direct data elements from table
\{

\var myHR::TWD_Months::iID
\brief Source: member myHR::TWD_Months::iID in class myHR::TWD_Months with the type std::optional<int>
\details Database: attribute "ID" in entity \ref datamodel_table_WD_Months with database type INT
\details unique identification number for a record in this domain with monthes for human resources

\var myHR::TWD_Months::strDenotation
\brief Source: member myHR::TWD_Months::strDenotation in class myHR::TWD_Months with the type std::optional<std::string>
\details Database: attribute "Denotation" in entity \ref datamodel_table_WD_Months with database type VARCHAR
\details unique denotation for a record in this domain with months, used in the programm to indentify this month, as selection in comboboxes and such

\var myHR::TWD_Months::strAbbreviation
\brief Source: member myHR::TWD_Months::strAbbreviation in class myHR::TWD_Months with the type std::optional<std::string>
\details Database: attribute "Abbreviation" in entity \ref datamodel_table_WD_Months with database type VARCHAR
\details unique abbreviation of a month in the domain, used in overviews and reports

\var myHR::TWD_Months::uQuarter
\brief Source: member myHR::TWD_Months::uQuarter in class myHR::TWD_Months with the type std::optional<unsigned int>
\details Database: attribute "Quarter" in entity \ref datamodel_table_WD_Months with database type INT
\details unsigned value with the number auf the quarter, values in 1 - 4


\}

\name public selectors with an optional retval for direct access to attributes
\{

\fn std::optional<int> const& myHR::TWD_Months::ID() const
\brief selector for the data element myHR::TWD_Months::iID
\returns std::optional<int> const&: Reference to the data element myHR::TWD_Months::iID
\fn std::optional<std::string> const& myHR::TWD_Months::Denotation() const
\brief selector for the data element myHR::TWD_Months::strDenotation
\returns std::optional<std::string> const&: Reference to the data element myHR::TWD_Months::strDenotation
\fn std::optional<std::string> const& myHR::TWD_Months::Abbreviation() const
\brief selector for the data element myHR::TWD_Months::strAbbreviation
\returns std::optional<std::string> const&: Reference to the data element myHR::TWD_Months::strAbbreviation
\fn std::optional<unsigned int> const& myHR::TWD_Months::Quarter() const
\brief selector for the data element myHR::TWD_Months::uQuarter
\returns std::optional<unsigned int> const&: Reference to the data element myHR::TWD_Months::uQuarter

\}

\name public selectors with an direct access to attributes
\{

\fn int myHR::TWD_Months::_ID() const
\brief special selector for data element myHR::TWD_Months::iID
\details attribute "ID" in entity "WD_Months"
\throws std::runtime::error if the attribute myHR::TWD_Months::iID is empty
\returns int const&: Reference to the data element myHR::TWD_Months::iID
\fn std::string const& myHR::TWD_Months::_Denotation() const
\brief special selector for data element myHR::TWD_Months::strDenotation
\details attribute "Denotation" in entity "WD_Months"
\throws std::runtime::error if the attribute myHR::TWD_Months::strDenotation is empty
\returns std::string const& const&: Reference to the data element myHR::TWD_Months::strDenotation
\fn std::string const& myHR::TWD_Months::_Abbreviation() const
\brief special selector for data element myHR::TWD_Months::strAbbreviation
\details attribute "Abbreviation" in entity "WD_Months"
\throws std::runtime::error if the attribute myHR::TWD_Months::strAbbreviation is empty
\returns std::string const& const&: Reference to the data element myHR::TWD_Months::strAbbreviation
\fn unsigned int myHR::TWD_Months::_Quarter() const
\brief special selector for data element myHR::TWD_Months::uQuarter
\details attribute "Quarter" in entity "WD_Months"
\throws std::runtime::error if the attribute myHR::TWD_Months::uQuarter is empty
\returns unsigned int const&: Reference to the data element myHR::TWD_Months::uQuarter

\}

\name public manipulators for direct access to the attributes
\{

\fn std::optional<int> const& myHR::TWD_Months::ID(std::optional<int> const& newVal)
\brief manipulator for the data element myHR::TWD_Months::iID
\param[in] newVal the new Value for the member myHR::TWD_Months::iID
\returns std::optional<int> const&: Reference to the data element myHR::TWD_Months::iID

\fn std::optional<std::string> const& myHR::TWD_Months::Denotation(std::optional<std::string> const& newVal)
\brief manipulator for the data element myHR::TWD_Months::strDenotation
\param[in] newVal the new Value for the member myHR::TWD_Months::strDenotation
\returns std::optional<std::string> const&: Reference to the data element myHR::TWD_Months::strDenotation

\fn std::optional<std::string> const& myHR::TWD_Months::Abbreviation(std::optional<std::string> const& newVal)
\brief manipulator for the data element myHR::TWD_Months::strAbbreviation
\param[in] newVal the new Value for the member myHR::TWD_Months::strAbbreviation
\returns std::optional<std::string> const&: Reference to the data element myHR::TWD_Months::strAbbreviation

\fn std::optional<unsigned int> const& myHR::TWD_Months::Quarter(std::optional<unsigned int> const& newVal)
\brief manipulator for the data element myHR::TWD_Months::uQuarter
\param[in] newVal the new Value for the member myHR::TWD_Months::uQuarter
\returns std::optional<unsigned int> const&: Reference to the data element myHR::TWD_Months::uQuarter


\}


